    1|       |/**
    2|       | * @file
    3|       | * @brief [Kruskals Minimum Spanning
    4|       | * Tree](https://www.simplilearn.com/tutorials/data-structure-tutorial/kruskal-algorithm)
    5|       | * implementation
    6|       | *
    7|       | * @details
    8|       | * _Quoted from
    9|       | * [Simplilearn](https://www.simplilearn.com/tutorials/data-structure-tutorial/kruskal-algorithm)._
   10|       | *
   11|       | * Kruskal’s algorithm is the concept that is introduced in the graph theory of
   12|       | * discrete mathematics. It is used to discover the shortest path between two
   13|       | * points in a connected weighted graph. This algorithm converts a given graph
   14|       | * into the forest, considering each node as a separate tree. These trees can
   15|       | * only link to each other if the edge connecting them has a low value and
   16|       | * doesn’t generate a cycle in MST structure.
   17|       | *
   18|       | * @author [coleman2246](https://github.com/coleman2246)
   19|       | */
   20|       |
   21|       |#include <array>     /// for array
   22|       |#include <iostream>  /// for IO operations
   23|       |#include <limits>    /// for numeric limits
   24|       |#include <cstdint>   /// for uint32_t
   25|       |
   26|       |/**
   27|       | * @namespace
   28|       | * @brief Greedy Algorithms
   29|       | */
   30|       |namespace greedy_algorithms {
   31|       |/**
   32|       | * @brief Finds the minimum edge of the given graph.
   33|       | * @param infinity Defines the infinity of the graph
   34|       | * @param graph The graph that will be used to find the edge
   35|       | * @returns void
   36|       | */
   37|       |template <typename T, std::size_t N, std::size_t M>
   38|       |void findMinimumEdge(const T &infinity,
   39|     11|                     const std::array<std::array<T, N>, M> &graph) {
   40|     11|    if (N != M) {
   41|      1|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
   42|      1|                  << "x" << M << ". Please provide a square matrix.\n";
   43|      1|        return;
   44|      1|    }
   45|     51|    for (int i = 0; i < graph.size(); i++) {
   46|     41|        int min = infinity;
   47|     41|        int minIndex = 0;
   48|    218|        for (int j = 0; j < graph.size(); j++) {
   49|    177|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
   50|     35|                min = graph[i][j];
   51|     35|                minIndex = j;
   52|     35|            }
   53|    177|        }
   54|     41|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
   55|     41|                  << "\n";
   56|     41|    }
   57|     10|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIiLm6ELm6EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      1|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      1|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|      7|    for (int i = 0; i < graph.size(); i++) {
  |   46|      6|        int min = infinity;
  |   47|      6|        int minIndex = 0;
  |   48|     42|        for (int j = 0; j < graph.size(); j++) {
  |   49|     36|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      9|                min = graph[i][j];
  |   51|      9|                minIndex = j;
  |   52|      9|            }
  |   53|     36|        }
  |   54|      6|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      6|                  << "\n";
  |   56|      6|    }
  |   57|      1|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIfLm3ELm3EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      1|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      1|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|      4|    for (int i = 0; i < graph.size(); i++) {
  |   46|      3|        int min = infinity;
  |   47|      3|        int minIndex = 0;
  |   48|     12|        for (int j = 0; j < graph.size(); j++) {
  |   49|      9|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      0|                min = graph[i][j];
  |   51|      0|                minIndex = j;
  |   52|      0|            }
  |   53|      9|        }
  |   54|      3|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      3|                  << "\n";
  |   56|      3|    }
  |   57|      1|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIdLm5ELm5EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      1|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      1|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|      6|    for (int i = 0; i < graph.size(); i++) {
  |   46|      5|        int min = infinity;
  |   47|      5|        int minIndex = 0;
  |   48|     30|        for (int j = 0; j < graph.size(); j++) {
  |   49|     25|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      0|                min = graph[i][j];
  |   51|      0|                minIndex = j;
  |   52|      0|            }
  |   53|     25|        }
  |   54|      5|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      5|                  << "\n";
  |   56|      5|    }
  |   57|      1|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIiLm3ELm3EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      2|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      2|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|      8|    for (int i = 0; i < graph.size(); i++) {
  |   46|      6|        int min = infinity;
  |   47|      6|        int minIndex = 0;
  |   48|     24|        for (int j = 0; j < graph.size(); j++) {
  |   49|     18|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      7|                min = graph[i][j];
  |   51|      7|                minIndex = j;
  |   52|      7|            }
  |   53|     18|        }
  |   54|      6|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      6|                  << "\n";
  |   56|      6|    }
  |   57|      2|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIiLm4ELm4EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      3|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      3|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|     15|    for (int i = 0; i < graph.size(); i++) {
  |   46|     12|        int min = infinity;
  |   47|     12|        int minIndex = 0;
  |   48|     60|        for (int j = 0; j < graph.size(); j++) {
  |   49|     48|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      8|                min = graph[i][j];
  |   51|      8|                minIndex = j;
  |   52|      8|            }
  |   53|     48|        }
  |   54|     12|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|     12|                  << "\n";
  |   56|     12|    }
  |   57|      3|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIiLm4ELm3EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      1|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      1|    if (N != M) {
  |   41|      1|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      1|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      1|        return;
  |   44|      1|    }
  |   45|      0|    for (int i = 0; i < graph.size(); i++) {
  |   46|      0|        int min = infinity;
  |   47|      0|        int minIndex = 0;
  |   48|      0|        for (int j = 0; j < graph.size(); j++) {
  |   49|      0|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      0|                min = graph[i][j];
  |   51|      0|                minIndex = j;
  |   52|      0|            }
  |   53|      0|        }
  |   54|      0|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      0|                  << "\n";
  |   56|      0|    }
  |   57|      0|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIiLm5ELm5EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      1|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      1|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|      6|    for (int i = 0; i < graph.size(); i++) {
  |   46|      5|        int min = infinity;
  |   47|      5|        int minIndex = 0;
  |   48|     30|        for (int j = 0; j < graph.size(); j++) {
  |   49|     25|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      5|                min = graph[i][j];
  |   51|      5|                minIndex = j;
  |   52|      5|            }
  |   53|     25|        }
  |   54|      5|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      5|                  << "\n";
  |   56|      5|    }
  |   57|      1|}
  ------------------
  | _ZN17greedy_algorithms15findMinimumEdgeIjLm4ELm4EEEvRKT_RKSt5arrayIS4_IS1_XT0_EEXT1_EE:
  |   39|      1|                     const std::array<std::array<T, N>, M> &graph) {
  |   40|      1|    if (N != M) {
  |   41|      0|        std::cout << "\nWrong input passed. Provided array has dimensions " << N
  |   42|      0|                  << "x" << M << ". Please provide a square matrix.\n";
  |   43|      0|        return;
  |   44|      0|    }
  |   45|      5|    for (int i = 0; i < graph.size(); i++) {
  |   46|      4|        int min = infinity;
  |   47|      4|        int minIndex = 0;
  |   48|     20|        for (int j = 0; j < graph.size(); j++) {
  |   49|     16|            if (i != j && graph[i][j] != 0 && graph[i][j] < min) {
  |   50|      6|                min = graph[i][j];
  |   51|      6|                minIndex = j;
  |   52|      6|            }
  |   53|     16|        }
  |   54|      4|        std::cout << i << "  -  " << minIndex << "\t" << graph[i][minIndex]
  |   55|      4|                  << "\n";
  |   56|      4|    }
  |   57|      1|}
  ------------------
   58|       |}  // namespace greedy_algorithms
   59|       |
   60|       |/**
   61|       | * @brief Self-test implementations
   62|       | * @returns void
   63|       | */
   64|      1|static void test() {
   65|       |    /**
   66|       |     * define a large value for int
   67|       |     * define a large value for float
   68|       |     * define a large value for double
   69|       |     * define a large value for uint32_t
   70|       |     */
   71|      1|    constexpr int INFINITY_INT = std::numeric_limits<int>::max();
   72|      1|    constexpr float INFINITY_FLOAT = std::numeric_limits<float>::max();
   73|      1|    constexpr double INFINITY_DOUBLE = std::numeric_limits<double>::max();
   74|      1|    constexpr uint32_t INFINITY_UINT32 = UINT32_MAX;
   75|       |  
   76|       |    // Test case with integer values
   77|      1|    std::cout << "\nTest Case 1 :\n";
   78|      1|    std::array<std::array<int, 6>, 6> graph1{
   79|      1|             0,            4,            1,             4,        INFINITY_INT,   INFINITY_INT,
   80|      1|             4,            0,            3,             8,             3,         INFINITY_INT,
   81|      1|             1,            3,            0,        INFINITY_INT,       1,         INFINITY_INT,
   82|      1|             4,            8,       INFINITY_INT,        0,            5,              7,
   83|      1|        INFINITY_INT,      3,            1,              5,            0,         INFINITY_INT,
   84|      1|        INFINITY_INT, INFINITY_INT, INFINITY_INT,        7,       INFINITY_INT,       0};
   85|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, graph1);
   86|       |
   87|       |    // Test case with floating values
   88|      1|    std::cout << "\nTest Case 2 :\n";
   89|      1|     std::array<std::array<float, 3>, 3> graph2{
   90|      1|             0.0f,           2.5f,  INFINITY_FLOAT,
   91|      1|             2.5f,           0.0f,       3.2f,
   92|      1|        INFINITY_FLOAT,      3.2f,       0.0f};
   93|      1|    greedy_algorithms::findMinimumEdge(INFINITY_FLOAT, graph2);
   94|       |
   95|       |    // Test case with double values
   96|      1|    std::cout << "\nTest Case 3 :\n";
   97|      1|   std::array<std::array<double, 5>, 5> graph3{
   98|      1|               0.0,             10.5,       INFINITY_DOUBLE,        6.7,              3.3,
   99|      1|               10.5,            0.0,              8.1,              15.4,       INFINITY_DOUBLE,
  100|      1|        INFINITY_DOUBLE,        8.1,              0.0,        INFINITY_DOUBLE,         7.8,
  101|      1|               6.7,             15.4,       INFINITY_DOUBLE,        0.0,               9.9,
  102|      1|               3.3,       INFINITY_DOUBLE,        7.8,              9.9,               0.0};
  103|      1|    greedy_algorithms::findMinimumEdge(INFINITY_DOUBLE, graph3);
  104|       |
  105|       |    // Test Case with negative weights
  106|      1|    std::cout << "\nTest Case 4 :\n";
  107|      1|    std::array<std::array<int, 3>, 3> graph_neg{
  108|      1|        0,   -2,   4,
  109|      1|       -2,    0,   3,
  110|      1|        4,    3,   0};
  111|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, graph_neg);
  112|       |
  113|       |    // Test Case with Self-Loops
  114|      1|    std::cout << "\nTest Case 5 :\n";
  115|      1|    std::array<std::array<int, 3>, 3> graph_self_loop{
  116|      1|               2,       1, INFINITY_INT,
  117|      1|        INFINITY_INT,   0,        4,
  118|      1|        INFINITY_INT,   4,        0};
  119|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, graph_self_loop);
  120|       |
  121|       |    // Test Case with no edges
  122|      1|    std::cout << "\nTest Case 6 :\n";
  123|      1|    std::array<std::array<int, 4>, 4> no_edges{
  124|      1|               0,       INFINITY_INT,   INFINITY_INT,   INFINITY_INT,
  125|      1|        INFINITY_INT,         0,        INFINITY_INT,   INFINITY_INT,
  126|      1|        INFINITY_INT,   INFINITY_INT,          0,       INFINITY_INT,
  127|      1|        INFINITY_INT,   INFINITY_INT,   INFINITY_INT,           0};
  128|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, no_edges);
  129|       |
  130|       |    // Test Case with a non-connected graph
  131|      1|    std::cout << "\nTest Case 7:\n";
  132|      1|    std::array<std::array<int, 4>, 4> partial_graph{
  133|      1|                0,             2,    INFINITY_INT,         6,
  134|      1|                2,             0,            3,     INFINITY_INT,
  135|      1|        INFINITY_INT,          3,            0,             4,
  136|      1|                6,     INFINITY_INT,         4,             0};
  137|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, partial_graph);
  138|       |
  139|       |    // Test Case with Directed weighted graph. The Krushkal algorithm does not give
  140|       |    // optimal answer
  141|      1|    std::cout << "\nTest Case 8:\n";
  142|      1|    std::array<std::array<int, 4>, 4> directed_graph{
  143|      1|                0,            3,            7,   INFINITY_INT,  // Vertex 0 has edges to Vertex 1 and Vertex 2
  144|      1|        INFINITY_INT,         0,            2,           5,  // Vertex 1 has edges to Vertex 2 and Vertex 3
  145|      1|        INFINITY_INT, INFINITY_INT,         0,           1,  // Vertex 2 has an edge to Vertex 3
  146|      1|        INFINITY_INT, INFINITY_INT, INFINITY_INT,        0};  // Vertex 3 has no outgoing edges
  147|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, directed_graph);
  148|       |
  149|       |    // Test case with wrong input passed
  150|      1|    std::cout << "\nTest Case 9:\n";
  151|      1|   std::array<std::array<int, 4>, 3> graph9{
  152|      1|        0,        5,        5,        5,
  153|      1|        5,        0,        5,        5,        
  154|      1|        5,        5,        5,        5};
  155|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, graph9);
  156|       |
  157|       |    // Test case with all the same values between every edge
  158|      1|    std::cout << "\nTest Case 10:\n";
  159|      1|    std::array<std::array<int, 5>, 5> graph10{
  160|      1|        0,        5,        5,        5,        5,
  161|      1|        5,        0,        5,        5,        5,
  162|      1|        5,        5,        0,        5,        5,
  163|      1|        5,        5,        5,        0,        5,
  164|      1|        5,        5,        5,        5,        0};
  165|      1|    greedy_algorithms::findMinimumEdge(INFINITY_INT, graph10);
  166|       |
  167|       |  // Test Case with uint32_t values
  168|      1|    std::cout << "\nTest Case 11 :\n";
  169|      1|    std::array<std::array<uint32_t, 4>, 4> graph_uint32{
  170|      1|                0,                      5,        INFINITY_UINT32,          9,
  171|      1|                5,                      0,                2,        INFINITY_UINT32,
  172|      1|        INFINITY_UINT32,                2,                0,                6,
  173|      1|                9,               INFINITY_UINT32,         6,                0};
  174|      1|    greedy_algorithms::findMinimumEdge(INFINITY_UINT32, graph_uint32);
  175|       |
  176|      1|    std::cout << "\nAll tests have successfully passed!\n";
  177|      1|}
  178|       |
  179|       |/**
  180|       | * @brief Main function
  181|       | * @returns 0 on exit
  182|       | */
  183|       |
  184|      1|int main() {
  185|      1|    test();  // run Self-test implementation
  186|      1|    return 0;
  187|      1|}
  188|       |

