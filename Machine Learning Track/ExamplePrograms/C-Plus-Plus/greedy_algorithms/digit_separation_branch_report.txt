    1|       |/**
    2|       | * @file digit_separation.cpp
    3|       | * @brief Separates digits from numbers in forward and reverse order
    4|       | * @see https://www.log2base2.com/c-examples/loop/split-a-number-into-digits-in-c.html
    5|       | * @details The DigitSeparation class provides two methods to separate the
    6|       | * digits of large integers: digitSeparationReverseOrder and
    7|       | * digitSeparationForwardOrder. The digitSeparationReverseOrder method extracts
    8|       | * digits by repeatedly applying the modulus operation (% 10) to isolate the
    9|       | * last digit, then divides the number by 10 to remove it. This process
   10|       | * continues until the entire number is broken down into its digits, which are
   11|       | * stored in reverse order. If the number is zero, the method directly returns a
   12|       | * vector containing {0} to handle this edge case. Negative numbers are handled
   13|       | * by taking the absolute value, ensuring consistent behavior regardless of the
   14|       | * sign.
   15|       | * @author [Muhammad Junaid Khalid](https://github.com/mjk22071998)
   16|       | */
   17|       |
   18|       |#include <algorithm>  /// For reveresing the vector
   19|       |#include <cassert>    /// For assert() function to check for errors
   20|       |#include <cmath>      /// For abs() function
   21|       |#include <cstdint>    /// For int64_t data type to handle large numbers
   22|       |#include <iostream>   /// For input/output operations
   23|       |#include <vector>     /// For std::vector to store separated digits
   24|       |
   25|       |/**
   26|       | * @namespace
   27|       | * @brief Greedy Algorithms
   28|       | */
   29|       |namespace greedy_algorithms {
   30|       |
   31|       |/**
   32|       | * @brief A class that provides methods to separate the digits of a large
   33|       | * positive number.
   34|       | */
   35|       |class DigitSeparation {
   36|       | public:
   37|       |    /**
   38|       |     * @brief Default constructor for the DigitSeparation class.
   39|       |     */
   40|      1|    DigitSeparation() {}
   41|       |
   42|       |    /**
   43|       |     * @brief Implementation of digitSeparationReverseOrder method.
   44|       |     *
   45|       |     * @param largeNumber The large number to separate digits from.
   46|       |     * @return A vector of digits in reverse order.
   47|       |     */
   48|       |    std::vector<std::int64_t> digitSeparationReverseOrder(
   49|     10|        std::int64_t largeNumber) const {
   50|     10|        std::vector<std::int64_t> result;
   51|     10|        if (largeNumber != 0) {
   52|     90|            while (largeNumber != 0) {
   53|     82|                result.push_back(std::abs(largeNumber % 10));
   54|     82|                largeNumber /= 10;
   55|     82|            }
   56|      8|        } else {
   57|      2|            result.push_back(0);
   58|      2|        }
   59|     10|        return result;
   60|     10|    }
   61|       |
   62|       |    /**
   63|       |     * @brief Implementation of digitSeparationForwardOrder method.
   64|       |     *
   65|       |     * @param largeNumber The large number to separate digits from.
   66|       |     * @return A vector of digits in forward order.
   67|       |     */
   68|       |    std::vector<std::int64_t> digitSeparationForwardOrder(
   69|      5|        std::int64_t largeNumber) const {
   70|      5|        std::vector<std::int64_t> result =
   71|      5|            digitSeparationReverseOrder(largeNumber);
   72|      5|        std::reverse(result.begin(), result.end());
   73|      5|        return result;
   74|      5|    }
   75|       |};
   76|       |
   77|       |}  // namespace greedy_algorithms
   78|       |
   79|       |/**
   80|       | * @brief self test implementation
   81|       | * @return void
   82|       | */
   83|      1|static void tests() {
   84|      1|    greedy_algorithms::DigitSeparation ds;
   85|       |
   86|       |    // Test case: Positive number
   87|      1|    std::int64_t number = 1234567890;
   88|      1|    std::vector<std::int64_t> expectedReverse = {0, 9, 8, 7, 6, 5, 4, 3, 2, 1};
   89|      1|    std::vector<std::int64_t> expectedForward = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};
   90|      1|    std::vector<std::int64_t> reverseOrder =
   91|      1|        ds.digitSeparationReverseOrder(number);
   92|      1|    assert(reverseOrder == expectedReverse);
   93|      0|    std::vector<std::int64_t> forwardOrder =
   94|      1|        ds.digitSeparationForwardOrder(number);
   95|      1|    assert(forwardOrder == expectedForward);
   96|       |
   97|       |    // Test case: Single digit number
   98|      0|    number = 5;
   99|      1|    expectedReverse = {5};
  100|      1|    expectedForward = {5};
  101|      1|    reverseOrder = ds.digitSeparationReverseOrder(number);
  102|      1|    assert(reverseOrder == expectedReverse);
  103|      0|    forwardOrder = ds.digitSeparationForwardOrder(number);
  104|      1|    assert(forwardOrder == expectedForward);
  105|       |
  106|       |    // Test case: Zero
  107|      0|    number = 0;
  108|      1|    expectedReverse = {0};
  109|      1|    expectedForward = {0};
  110|      1|    reverseOrder = ds.digitSeparationReverseOrder(number);
  111|      1|    assert(reverseOrder == expectedReverse);
  112|      0|    forwardOrder = ds.digitSeparationForwardOrder(number);
  113|      1|    assert(forwardOrder == expectedForward);
  114|       |
  115|       |    // Test case: Large number
  116|      0|    number = 987654321012345;
  117|      1|    expectedReverse = {5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  118|      1|    expectedForward = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5};
  119|      1|    reverseOrder = ds.digitSeparationReverseOrder(number);
  120|      1|    assert(reverseOrder == expectedReverse);
  121|      0|    forwardOrder = ds.digitSeparationForwardOrder(number);
  122|      1|    assert(forwardOrder == expectedForward);
  123|       |
  124|       |    // Test case: Negative number
  125|      0|    number = -987654321012345;
  126|      1|    expectedReverse = {5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  127|      1|    expectedForward = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5};
  128|      1|    reverseOrder = ds.digitSeparationReverseOrder(number);
  129|      1|    assert(reverseOrder == expectedReverse);
  130|      0|    forwardOrder = ds.digitSeparationForwardOrder(number);
  131|      1|    assert(forwardOrder == expectedForward);
  132|      1|}
  133|       |
  134|       |/**
  135|       | * @brief main function
  136|       | * @return 0 on successful exit
  137|       | */
  138|      1|int main() {
  139|      1|    tests();  // run self test implementation
  140|       |
  141|      1|    return 0;
  142|      1|}

