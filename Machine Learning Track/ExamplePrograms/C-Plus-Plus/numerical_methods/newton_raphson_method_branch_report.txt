    1|       |/**
    2|       | * \file
    3|       | * \brief Solve the equation \f$f(x)=0\f$ using [Newton-Raphson
    4|       | * method](https://en.wikipedia.org/wiki/Newton%27s_method) for both real and
    5|       | * complex solutions
    6|       | *
    7|       | * The \f$(i+1)^\text{th}\f$ approximation is given by:
    8|       | * \f[
    9|       | * x_{i+1} = x_i - \frac{f(x_i)}{f'(x_i)}
   10|       | * \f]
   11|       | *
   12|       | * \author [Krishna Vedala](https://github.com/kvedala)
   13|       | * \see bisection_method.cpp, false_position.cpp
   14|       | */
   15|       |#include <cmath>
   16|       |#include <cstdint>
   17|       |#include <ctime>
   18|       |#include <iostream>
   19|       |#include <limits>
   20|       |
   21|       |constexpr double EPSILON = 1e-10;              ///< system accuracy limit
   22|       |constexpr int16_t MAX_ITERATIONS = INT16_MAX;  ///< Maximum number of iterations
   23|       |
   24|       |/** define \f$f(x)\f$ to find root for.
   25|       | * Currently defined as:
   26|       | * \f[
   27|       | * f(x) = x^3 - 4x - 9
   28|       | * \f]
   29|       | */
   30|     11|static double eq(double i) {
   31|     11|    return (std::pow(i, 3) - (4 * i) - 9);  // original equation
   32|     11|}
   33|       |
   34|       |/** define the derivative function \f$f'(x)\f$
   35|       | * For the current problem, it is:
   36|       | * \f[
   37|       | * f'(x) = 3x^2 - 4
   38|       | * \f]
   39|       | */
   40|     11|static double eq_der(double i) {
   41|     11|    return ((3 * std::pow(i, 2)) - 4);  // derivative of equation
   42|     11|}
   43|       |
   44|       |/** Main function */
   45|      1|int main() {
   46|      1|    std::srand(std::time(nullptr));  // initialize randomizer
   47|       |
   48|      1|    double z = NAN, c = std::rand() % 100, m = NAN, n = NAN;
   49|      1|    int i = 0;
   50|       |
   51|      1|    std::cout << "\nInitial approximation: " << c;
   52|       |
   53|       |    // start iterations
   54|     11|    for (i = 0; i < MAX_ITERATIONS; i++) {
   55|     11|        m = eq(c);
   56|     11|        n = eq_der(c);
   57|       |
   58|     11|        z = c - (m / n);
   59|     11|        c = z;
   60|       |
   61|     11|        if (std::abs(m) < EPSILON) {  // stoping criteria
   62|      1|            break;
   63|      1|        }
   64|     11|    }
   65|       |
   66|      1|    std::cout << "\n\nRoot: " << z << "\t\tSteps: " << i << std::endl;
   67|      1|    return 0;
   68|      1|}

