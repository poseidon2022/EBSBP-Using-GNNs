    1|       |/**
    2|       | * @file
    3|       | * @brief          String pattern search - brute force
    4|       | */
    5|       |#include <iostream>
    6|       |#ifdef _MSC_VER
    7|       |#include <string>  // use this for MS Visual C++
    8|       |#else
    9|       |#include <cstring>
   10|       |#endif
   11|       |#include <vector>
   12|       |
   13|       |namespace string_search {
   14|       |/**
   15|       | * Find a pattern in a string by comparing the pattern to every substring.
   16|       | * @param text     Any string that might contain the pattern.
   17|       | * @param pattern  String that we are searching for.
   18|       | * @return         Index where the pattern starts in the text
   19|       | * @return         -1 if the pattern was not found.
   20|       | */
   21|      6|int brute_force(const std::string &text, const std::string &pattern) {
   22|      6|    size_t pat_l = pattern.length();
   23|      6|    size_t txt_l = text.length();
   24|      6|    int index = -1;
   25|      6|    if (pat_l <= txt_l) {
   26|      8|        for (size_t i = 0; i < txt_l - pat_l + 1; i++) {
   27|      8|            std::string s = text.substr(i, pat_l);
   28|      8|            if (s == pattern) {
   29|      5|                index = i;
   30|      5|                break;
   31|      5|            }
   32|      8|        }
   33|      5|    }
   34|      6|    return index;
   35|      6|}
   36|       |}  // namespace string_search
   37|       |
   38|       |using string_search::brute_force;
   39|       |
   40|       |/** set of test cases */
   41|       |const std::vector<std::vector<std::string>> test_set = {
   42|       |    // {text, pattern, expected output}
   43|       |    {"a", "aa", "-1"},  {"a", "a", "0"},    {"ba", "b", "0"},
   44|       |    {"bba", "bb", "0"}, {"bbca", "c", "2"}, {"ab", "b", "1"}};
   45|       |
   46|       |/** Main function */
   47|      1|int main() {
   48|      6|    for (const auto &i : test_set) {
   49|      6|        int output = brute_force(i[0], i[1]);
   50|       |
   51|      6|        if (std::to_string(output) == i[2]) {
   52|      6|            std::cout << "success\n";
   53|      6|        } else {
   54|      0|            std::cout << "failure\n";
   55|      0|        }
   56|      6|    }
   57|      1|    return 0;
   58|      1|}

