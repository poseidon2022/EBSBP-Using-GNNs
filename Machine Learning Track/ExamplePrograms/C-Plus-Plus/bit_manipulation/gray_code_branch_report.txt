    1|       |/**
    2|       | * @brief Program to generate n-bit [Gray 
    3|       | * code](https://en.wikipedia.org/wiki/Gray_code)
    4|       | * 
    5|       | * @details
    6|       | * Gray code is a binary numeral system
    7|       | * where consecutive values differ in exactly 1 bit.
    8|       | * The following code offers one of many possible Gray codes 
    9|       | * given some pre-determined number of bits.
   10|       | */
   11|       |
   12|       |#include <bitset>  /// for gray code representation
   13|       |#include <cassert>  /// for assert
   14|       |#include <iostream>  /// for IO operations
   15|       |#include <vector>  /// for vector data structure
   16|       |
   17|       |/**
   18|       | * @namespace bit_manipulation
   19|       | * @brief Bit manipulation algorithms
   20|       | */
   21|       |namespace bit_manipulation {
   22|       |/**
   23|       | * @namespace gray_code
   24|       | * @brief Generate n-bit Gray code
   25|       | */
   26|       |namespace gray_code {
   27|       |/**
   28|       | * @brief The main function to generate n-bit Gray code
   29|       | *
   30|       | * @param n Number of bits
   31|       | * @return A vector that stores the n-bit Gray code
   32|       | */
   33|      7|std::vector<std::bitset<32>> gray_code_generation(int n) {
   34|      7|    std::vector<std::bitset<32>> gray_code = {};  // Initialise empty vector
   35|       |
   36|       |    // No Gray codes for non-positive values of n
   37|      7|    if (n <= 0) {
   38|      2|        return gray_code;
   39|      2|    }
   40|       |    
   41|      5|    int total_codes = 1 << n;  // Number of n-bit gray codes
   42|       |
   43|     67|    for (int i = 0; i < total_codes; i++) {
   44|     62|        int gray_num = i ^ (i >> 1);  // Gray code formula
   45|     62|        gray_code.push_back(std::bitset<32>(gray_num));  // Store the value
   46|     62|    }
   47|       |
   48|      5|    return gray_code;
   49|      7|} 
   50|       |}  // namespace gray_code
   51|       |}  // namespace bit_manipulation
   52|       |
   53|       |/**
   54|       | * @brief Self-test implementation
   55|       | *
   56|       | * @returns void
   57|       | */
   58|      1|static void test() { 
   59|      1|    std::vector<std::bitset<32>> gray_code_negative_1 = {};
   60|       |
   61|      1|    std::vector<std::bitset<32>> gray_code_0 = {};
   62|       |
   63|      1|    std::vector<std::bitset<32>> gray_code_1 = {
   64|      1|        std::bitset<32>(0), std::bitset<32>(1)
   65|      1|    };
   66|       |
   67|      1|    std::vector<std::bitset<32>> gray_code_2 = {
   68|      1|        std::bitset<32>(0), std::bitset<32>(1), std::bitset<32>(3), std::bitset<32>(2)
   69|      1|    };
   70|       |
   71|      1|    std::vector<std::bitset<32>> gray_code_3 = {
   72|      1|        std::bitset<32>(0), std::bitset<32>(1), std::bitset<32>(3), std::bitset<32>(2),
   73|      1|        std::bitset<32>(6), std::bitset<32>(7), std::bitset<32>(5), std::bitset<32>(4)
   74|      1|    };
   75|       |
   76|      1|    std::vector<std::bitset<32>> gray_code_4 = {
   77|      1|        std::bitset<32>(0), std::bitset<32>(1), std::bitset<32>(3), std::bitset<32>(2),
   78|      1|        std::bitset<32>(6), std::bitset<32>(7), std::bitset<32>(5), std::bitset<32>(4),
   79|      1|        std::bitset<32>(12), std::bitset<32>(13), std::bitset<32>(15), std::bitset<32>(14),
   80|      1|        std::bitset<32>(10), std::bitset<32>(11), std::bitset<32>(9), std::bitset<32>(8)
   81|      1|    };
   82|       |
   83|      1|    std::vector<std::bitset<32>> gray_code_5 = {
   84|      1|        std::bitset<32>(0), std::bitset<32>(1), std::bitset<32>(3), std::bitset<32>(2),
   85|      1|        std::bitset<32>(6), std::bitset<32>(7), std::bitset<32>(5), std::bitset<32>(4),
   86|      1|        std::bitset<32>(12), std::bitset<32>(13), std::bitset<32>(15), std::bitset<32>(14),
   87|      1|        std::bitset<32>(10), std::bitset<32>(11), std::bitset<32>(9), std::bitset<32>(8),
   88|      1|        std::bitset<32>(24), std::bitset<32>(25), std::bitset<32>(27), std::bitset<32>(26),
   89|      1|        std::bitset<32>(30), std::bitset<32>(31), std::bitset<32>(29), std::bitset<32>(28),
   90|      1|        std::bitset<32>(20), std::bitset<32>(21), std::bitset<32>(23), std::bitset<32>(22),
   91|      1|        std::bitset<32>(18), std::bitset<32>(19), std::bitset<32>(17), std::bitset<32>(16)
   92|      1|    };
   93|       |
   94|       |    // invalid values for n
   95|      1|    assert(bit_manipulation::gray_code::gray_code_generation(-1) == gray_code_negative_1);
   96|      0|    assert(bit_manipulation::gray_code::gray_code_generation(0) == gray_code_0);
   97|       |
   98|       |    // valid values for n
   99|      0|    assert(bit_manipulation::gray_code::gray_code_generation(1) == gray_code_1);
  100|      0|    assert(bit_manipulation::gray_code::gray_code_generation(2) == gray_code_2);
  101|      0|    assert(bit_manipulation::gray_code::gray_code_generation(3) == gray_code_3);
  102|      0|    assert(bit_manipulation::gray_code::gray_code_generation(4) == gray_code_4);
  103|      0|    assert(bit_manipulation::gray_code::gray_code_generation(5) == gray_code_5);
  104|      1|}
  105|       |
  106|       |/**
  107|       | * @brief Main function
  108|       | * @returns 0 on exit
  109|       | */
  110|      1|int main() {
  111|      1|    test();  //Run self-test implementation
  112|      1|    return 0;
  113|      1|}

