    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation to
    4|       | * [Count number of bits to be flipped to convert A to B]
    5|       | * (https://www.geeksforgeeks.org/count-number-of-bits-to-be-flipped-to-convert-a-to-b/)
    6|       | * in an integer.
    7|       | *
    8|       | * @details
    9|       | * We are given two numbers A and B. Our task is to count the number of bits
   10|       | * needed to be flipped to convert A to B.
   11|       | *
   12|       | * Explanation:
   13|       | *
   14|       | * A  = 01010 B  = 10100
   15|       | * As we can see, the bits of A that need to be flipped are 01010.
   16|       | * If we flipthese bits, we get 10100, which is B.
   17|       | *
   18|       | * Worst Case Time Complexity: O(log n)
   19|       | * Space complexity: O(1)
   20|       | * @author [Yash Raj Singh](https://github.com/yashrajyash)
   21|       | */
   22|       |#include <cassert>   /// for assert
   23|       |#include <cstdint>
   24|       |#include <iostream>  /// for IO operations
   25|       |/**
   26|       | * @namespace bit_manipulation
   27|       | * @brief Bit manipulation algorithms
   28|       | */
   29|       |namespace bit_manipulation {
   30|       |/**
   31|       | * @namespace count_bits_flip
   32|       | * @brief Functions for the [count bits
   33|       | * flip](https://www.geeksforgeeks.org/count-set-bits-in-an-integer/)
   34|       | * implementation
   35|       | */
   36|       |namespace count_bits_flip {
   37|       |/**
   38|       | * @brief The main function implements count of bits flip required
   39|       | * @param A is the given number whose bits will be flipped to get number B
   40|       | * @param B is the given target number
   41|       | * @returns total number of bits needed to be flipped to convert A to B
   42|       | */
   43|       |std::uint64_t countBitsFlip(
   44|       |    std::int64_t A,
   45|      7|    std::int64_t B) {  // int64_t is preferred over int so that
   46|       |                       // no Overflow can be there.
   47|       |
   48|      7|    int count =
   49|      7|        0;  // "count" variable is used to count number of bits flip of the
   50|       |            // number A to form B in binary representation of number 'n'
   51|      7|    A = A ^ B;
   52|     27|    while (A) {
   53|     20|        A = A & (A - 1);
   54|     20|        count++;
   55|     20|    }
   56|      7|    return count;
   57|      7|}
   58|       |}  // namespace count_bits_flip
   59|       |}  // namespace bit_manipulation
   60|       |
   61|       |/**
   62|       | * @brief Self-test implementations
   63|       | * @returns void
   64|       | */
   65|      1|static void test() {
   66|       |    // A = 10, B = 20 return 4
   67|      1|    assert(bit_manipulation::count_bits_flip::countBitsFlip(10, 20) == 4);
   68|       |    // A = 20, B = 25 return 3
   69|      0|    assert(bit_manipulation::count_bits_flip::countBitsFlip(20, 25) == 3);
   70|       |    // A = 7, B = 10 return 3
   71|      0|    assert(bit_manipulation::count_bits_flip::countBitsFlip(7, 10) == 3);
   72|       |    // A = 17, B = 25 return 1
   73|      0|    assert(bit_manipulation::count_bits_flip::countBitsFlip(17, 25) == 1);
   74|       |    // A = 11, B = 8 return 2
   75|      0|    assert(bit_manipulation::count_bits_flip::countBitsFlip(11, 8) == 2);
   76|       |    // A = 21, B = 22 return 2
   77|      0|    assert(bit_manipulation::count_bits_flip::countBitsFlip(21, 22) == 2);
   78|       |    // A = 7, B = 786 return 5
   79|      0|    assert(bit_manipulation::count_bits_flip::countBitsFlip(7, 786) == 5);
   80|      0|    std::cout << "All test cases successfully passed!" << std::endl;
   81|      1|}
   82|       |/**
   83|       | * @brief Main function
   84|       | * @returns 0 on exit
   85|       | */
   86|      1|int main() {
   87|      1|    test();  // run self-test implementations
   88|      1|    return 0;
   89|      1|}

