    1|       |/**
    2|       | * @file
    3|       | * @brief Returns the [Hamming
    4|       | * distance](https://en.wikipedia.org/wiki/Hamming_distance) between two
    5|       | * integers
    6|       | *
    7|       | * @details
    8|       | * To find hamming distance between two integers, we take their xor, which will
    9|       | * have a set bit iff those bits differ in the two numbers.
   10|       | * Hence, we return the number of such set bits.
   11|       | *
   12|       | * @author [Ravishankar Joshi](https://github.com/ravibitsgoa)
   13|       | */
   14|       |
   15|       |#include <cassert>   /// for assert
   16|       |#include <cstdint>
   17|       |#include <iostream>  /// for io operations
   18|       |
   19|       |/**
   20|       | * @namespace bit_manipulation
   21|       | * @brief Bit Manipulation algorithms
   22|       | */
   23|       |namespace bit_manipulation {
   24|       |/**
   25|       | * @namespace hamming_distance
   26|       | * @brief Functions for [Hamming
   27|       | * distance](https://en.wikipedia.org/wiki/Hamming_distance) implementation
   28|       | */
   29|       |namespace hamming_distance {
   30|       |/**
   31|       | * This function returns the number of set bits in the given number.
   32|       | * @param value the number of which we want to count the number of set bits.
   33|       | * @returns the number of set bits in the given number.
   34|       | */
   35|      4|uint64_t bitCount(uint64_t value) {
   36|      4|    uint64_t count = 0;
   37|     18|    while (value) {       // until all bits are zero
   38|     14|        if (value & 1) {  // check lower bit
   39|      8|            count++;
   40|      8|        }
   41|     14|        value >>= 1;  // shift bits, removing lower bit
   42|     14|    }
   43|      4|    return count;
   44|      4|}
   45|       |
   46|       |/**
   47|       | * This function returns the hamming distance between two integers.
   48|       | * @param a the first number
   49|       | * @param b the second number
   50|       | * @returns the number of bits differing between the two integers.
   51|       | */
   52|      4|uint64_t hamming_distance(uint64_t a, uint64_t b) { return bitCount(a ^ b); }
   53|       |
   54|       |/**
   55|       | * This function returns the hamming distance between two strings.
   56|       | * @param a the first string
   57|       | * @param b the second string
   58|       | * @returns the number of characters differing between the two strings.
   59|       | */
   60|      6|uint64_t hamming_distance(const std::string& a, const std::string& b) {
   61|      6|    assert(a.size() == b.size());
   62|      0|    size_t n = a.size();
   63|      6|    uint64_t count = 0;
   64|     31|    for (size_t i = 0; i < n; i++) {
   65|     25|        count += (b[i] != a[i]);
   66|     25|    }
   67|      6|    return count;
   68|      6|}
   69|       |}  // namespace hamming_distance
   70|       |}  // namespace bit_manipulation
   71|       |
   72|       |/**
   73|       | * @brief Function to the test hamming distance.
   74|       | * @returns void
   75|       | */
   76|      1|static void test() {
   77|      1|    assert(bit_manipulation::hamming_distance::hamming_distance(11, 2) == 2);
   78|      0|    assert(bit_manipulation::hamming_distance::hamming_distance(2, 0) == 1);
   79|      0|    assert(bit_manipulation::hamming_distance::hamming_distance(11, 0) == 3);
   80|       |
   81|      0|    assert(bit_manipulation::hamming_distance::hamming_distance("1101",
   82|      1|                                                                "1111") == 1);
   83|      0|    assert(bit_manipulation::hamming_distance::hamming_distance("1111",
   84|      1|                                                                "1111") == 0);
   85|      0|    assert(bit_manipulation::hamming_distance::hamming_distance("0000",
   86|      1|                                                                "1111") == 4);
   87|       |
   88|      0|    assert(bit_manipulation::hamming_distance::hamming_distance("alpha",
   89|      1|                                                                "alphb") == 1);
   90|      0|    assert(bit_manipulation::hamming_distance::hamming_distance("abcd",
   91|      1|                                                                "abcd") == 0);
   92|      0|    assert(bit_manipulation::hamming_distance::hamming_distance("dcba",
   93|      1|                                                                "abcd") == 4);
   94|      1|}
   95|       |
   96|       |/**
   97|       | * @brief Main function
   98|       | * @returns 0 on exit
   99|       | */
  100|      1|int main() {
  101|      1|    test();           // execute the tests
  102|      1|    uint64_t a = 11;  // 1011 in binary
  103|      1|    uint64_t b = 2;   // 0010 in binary
  104|       |
  105|      1|    std::cout << "Hamming distance between " << a << " and " << b << " is "
  106|      1|              << bit_manipulation::hamming_distance::hamming_distance(a, b)
  107|      1|              << std::endl;
  108|      1|}

