    1|       |/**
    2|       | * @file
    3|       | * @brief [Count the number of
    4|       | * ciphers](https://www.tutorialspoint.com/count-trailing-zeros-in-factorial-of-a-number-in-cplusplus) in `n!` implementation
    5|       | * @details
    6|       | * Given an integer number as input. The goal is to find the number of trailing
    7|       | zeroes in the factorial calculated for
    8|       | * that number. A factorial of a number N is a product of all numbers in the
    9|       | range [1, N].
   10|       |
   11|       | * We know that we get a trailing zero only if the number is multiple of 10 or
   12|       | has a factor pair (2,5). In all factorials of
   13|       | * any number greater than 5, we have many 2s more than 5s in the prime
   14|       | factorization of that number. Dividing a
   15|       | * number by powers of 5 will give us the count of 5s in its factors. So, the
   16|       | number of 5s will tell us the number of trailing zeroes.
   17|       | * @author [Swastika Gupta](https://github.com/Swastyy)
   18|       | */
   19|       |
   20|       |#include <cassert>   /// for assert
   21|       |#include <cstdint>
   22|       |#include <iostream>  /// for IO operations
   23|       |
   24|       |/**
   25|       | * @namespace bit_manipulation
   26|       | * @brief Bit manipulation algorithms
   27|       | */
   28|       |namespace bit_manipulation {
   29|       |/**
   30|       | * @namespace count_of_trailing_ciphers_in_factorial_n
   31|       | * @brief Functions for the [Count the number of
   32|       | * ciphers](https://www.tutorialspoint.com/count-trailing-zeros-in-factorial-of-a-number-in-cplusplus)
   33|       | * in `n!` implementation
   34|       | */
   35|       |namespace count_of_trailing_ciphers_in_factorial_n {
   36|       |/**
   37|       | * @brief Function to count the number of the trailing ciphers
   38|       | * @param n number for which `n!` ciphers are returned
   39|       | * @return count, Number of ciphers in `n!`.
   40|       | */
   41|      5|uint64_t numberOfCiphersInFactorialN(uint64_t n) {
   42|       |    // count is to store the number of 5's in factorial(n)
   43|      5|    uint64_t count = 0;
   44|       |
   45|       |    // Keep dividing n by powers of
   46|       |    // 5 and update count
   47|     19|    for (uint64_t i = 5; n / i >= 1; i *= 5) {
   48|     14|        count += static_cast<uint64_t>(n) / i;
   49|     14|    }
   50|       |
   51|      5|    return count;
   52|      5|}
   53|       |}  // namespace count_of_trailing_ciphers_in_factorial_n
   54|       |}  // namespace bit_manipulation
   55|       |
   56|       |/**
   57|       | * @brief Self-test implementations
   58|       | * @returns void
   59|       | */
   60|      1|static void test() {
   61|       |    // 1st test
   62|      1|    std::cout << "1st test ";
   63|      1|    assert(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::
   64|      1|               numberOfCiphersInFactorialN(395) == 97);
   65|      0|    std::cout << "passed" << std::endl;
   66|       |
   67|       |    // 2nd test
   68|      1|    std::cout << "2nd test ";
   69|      1|    assert(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::
   70|      1|               numberOfCiphersInFactorialN(977) == 242);
   71|      0|    std::cout << "passed" << std::endl;
   72|       |
   73|       |    // 3rd test
   74|      1|    std::cout << "3rd test ";
   75|      1|    assert(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::
   76|      1|               numberOfCiphersInFactorialN(871) == 215);
   77|      0|    std::cout << "passed" << std::endl;
   78|       |
   79|       |    // 4th test
   80|      1|    std::cout << "4th test ";
   81|      1|    assert(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::
   82|      1|               numberOfCiphersInFactorialN(239) == 57);
   83|      0|    std::cout << "passed" << std::endl;
   84|       |
   85|       |    // 5th test
   86|      1|    std::cout << "5th test ";
   87|      1|    assert(bit_manipulation::count_of_trailing_ciphers_in_factorial_n::
   88|      1|               numberOfCiphersInFactorialN(0) == 0);
   89|      0|    std::cout << "passed" << std::endl;
   90|      1|}
   91|       |
   92|       |/**
   93|       | * @brief Main function
   94|       | * @returns 0 on exit
   95|       | */
   96|      1|int main() {
   97|      1|    test();  // run self-test implementations
   98|      1|    return 0;
   99|      1|}

