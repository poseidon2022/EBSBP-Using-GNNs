    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation to [From the right, set the Kth bit in the binary
    4|       | * representation of N]
    5|       | * (https://practice.geeksforgeeks.org/problems/set-kth-bit3724/1/) in an
    6|       | * integer.
    7|       | *
    8|       | * @details
    9|       | * Given a number N and a value K. From the right, set the Kth bit in the binary
   10|       | * representation of N. The position of Least Significant Bit(or last bit) is 0,
   11|       | * the second last bit is 1 and so on. in it.
   12|       | *
   13|       | * A binary number consists of two digits. They are 0 & 1. Digit 1 is known as
   14|       | * set bit in computer terms.
   15|       | * Worst Case Time Complexity: O(1)
   16|       | * Space complexity: O(1)
   17|       |
   18|       | * @author [Aman Raj](https://github.com/aman2000raj)
   19|       | */
   20|       |
   21|       |#include <cassert>   /// for assert
   22|       |#include <cstdint>
   23|       |#include <iostream>  /// for IO operations
   24|       |
   25|       |/**
   26|       | * @namespace bit_manipulation
   27|       | * @brief Bit manipulation algorithms
   28|       | */
   29|       |namespace bit_manipulation {
   30|       |/**
   31|       | * @namespace setKthBit
   32|       | * @brief Functions for the [From the right, set the Kth bit in the binary
   33|       | * representation of N]
   34|       | * (https://practice.geeksforgeeks.org/problems/set-kth-bit3724/1/)
   35|       | * implementation
   36|       | */
   37|       |namespace set_kth_bit {
   38|       |/**
   39|       | * @brief The main function implements set kth bit
   40|       | * @param N is the number whose kth bit will be set
   41|       | * @returns returns an integer after setting the K'th bit in N
   42|       | */
   43|       |std::uint64_t setKthBit(std ::int64_t N,
   44|      4|                        std ::int64_t k) {  // int64_t is preferred over int so
   45|       |                                            // that no Overflow can be there.
   46|       |
   47|      4|    int pos =
   48|      4|        1 << k;  // "pos" variable is used to store 1 at kth postion and
   49|       |                 // rest bits are 0. in binary representation of number 'n'
   50|       |
   51|      4|    return N | pos;  // by taking or with the pos and the N we set the bit of N
   52|       |                     // at kth position.
   53|      4|}
   54|       |}  // namespace set_kth_bit
   55|       |}  // namespace bit_manipulation
   56|       |
   57|       |/**
   58|       | * @brief Self-test implementations
   59|       | * @returns void
   60|       | */
   61|      1|static void test() {
   62|       |    // n = 10,2 return 14
   63|      1|    assert(bit_manipulation::set_kth_bit::setKthBit(10, 2) == 14);
   64|       |    // n = 25,1 return 27
   65|      0|    assert(bit_manipulation::set_kth_bit::setKthBit(25, 1) == 27);
   66|       |    // n = 400001,5 return 400033
   67|      0|    assert(bit_manipulation::set_kth_bit::setKthBit(400001, 5) == 400033);
   68|       |    // n = 123 return 123
   69|      0|    assert(bit_manipulation::set_kth_bit::setKthBit(123, 3) == 123);
   70|       |
   71|      0|    std::cout << "All test cases successfully passed!" << std::endl;
   72|      1|}
   73|       |/**
   74|       | * @brief Main function
   75|       | * @returns 0 on exit
   76|       | */
   77|      1|int main() {
   78|      1|    test();  // run self-test implementations
   79|      1|    return 0;
   80|      1|}

