    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation of [Pigeonhole Sort algorithm]
    4|       | * (https://en.wikipedia.org/wiki/Pigeonhole_sort)
    5|       | * @author [Lownish](https://github.com/Lownish)
    6|       | * @details
    7|       | * Pigeonhole sorting is a sorting algorithm that is suitable for sorting lists
    8|       | * of elements where the number of elements and the number of possible key
    9|       | * values are approximately the same. It requires O(n + Range) time where n is
   10|       | * number of elements in input array and ‘Range’ is number of possible values in
   11|       | * array.
   12|       | *
   13|       | * The time Complexity of the algorithm is \f$O(n+N)\f$.
   14|       | */
   15|       |
   16|       |#include <algorithm>  //for std::is_sorted
   17|       |#include <array>      //for std::array
   18|       |#include <cassert>    //for assert
   19|       |#include <iostream>   //for io operations
   20|       |
   21|       |/**
   22|       | * @namespace sorting
   23|       | * @brief Sorting algorithms
   24|       | */
   25|       |namespace sorting {
   26|       |
   27|       |/**
   28|       | * Pigeonhole sorting of array of size n
   29|       | * The function will sort the array through Pigeonhole algorithm and print
   30|       | * @param arr unsorted array of elements
   31|       | * @returns sorted array of elements
   32|       | */
   33|       |template <std::size_t N>
   34|      3|std::array<int, N> pigeonSort(std::array<int, N> arr) {
   35|       |    // Finding min and max*
   36|      3|    auto min = std::min_element(std::begin(arr), std::end(arr));
   37|      3|    auto max = std::max_element(std::begin(arr), std::end(arr));
   38|       |
   39|       |    // Range refers to the number of holes required
   40|      3|    int range = *max - *min + 1;
   41|      3|    int *hole = new int[range]();
   42|       |
   43|       |    // Copying all array values to pigeonhole
   44|     24|    for (int i = 0; i < N; i++) {
   45|     21|        hole[arr[i] - *min] = arr[i];
   46|     21|    }
   47|       |
   48|       |    // Deleting elements from list and storing to original array
   49|      3|    int count = 0;
   50|    927|    for (int i = 0; i < range; i++) {
   51|    944|        while (hole[i] != '\0') {
   52|     20|            arr[count] = hole[i];
   53|     20|            hole[i] = {};
   54|     20|            count++;
   55|     20|        }
   56|    924|    }
   57|      3|    delete[] hole;
   58|       |
   59|      3|    return arr;
   60|      3|}
  ------------------
  | _ZN7sorting10pigeonSortILm7EEESt5arrayIiXT_EES2_:
  |   34|      1|std::array<int, N> pigeonSort(std::array<int, N> arr) {
  |   35|       |    // Finding min and max*
  |   36|      1|    auto min = std::min_element(std::begin(arr), std::end(arr));
  |   37|      1|    auto max = std::max_element(std::begin(arr), std::end(arr));
  |   38|       |
  |   39|       |    // Range refers to the number of holes required
  |   40|      1|    int range = *max - *min + 1;
  |   41|      1|    int *hole = new int[range]();
  |   42|       |
  |   43|       |    // Copying all array values to pigeonhole
  |   44|      8|    for (int i = 0; i < N; i++) {
  |   45|      7|        hole[arr[i] - *min] = arr[i];
  |   46|      7|    }
  |   47|       |
  |   48|       |    // Deleting elements from list and storing to original array
  |   49|      1|    int count = 0;
  |   50|      8|    for (int i = 0; i < range; i++) {
  |   51|     13|        while (hole[i] != '\0') {
  |   52|      6|            arr[count] = hole[i];
  |   53|      6|            hole[i] = {};
  |   54|      6|            count++;
  |   55|      6|        }
  |   56|      7|    }
  |   57|      1|    delete[] hole;
  |   58|       |
  |   59|      1|    return arr;
  |   60|      1|}
  ------------------
  | _ZN7sorting10pigeonSortILm10EEESt5arrayIiXT_EES2_:
  |   34|      1|std::array<int, N> pigeonSort(std::array<int, N> arr) {
  |   35|       |    // Finding min and max*
  |   36|      1|    auto min = std::min_element(std::begin(arr), std::end(arr));
  |   37|      1|    auto max = std::max_element(std::begin(arr), std::end(arr));
  |   38|       |
  |   39|       |    // Range refers to the number of holes required
  |   40|      1|    int range = *max - *min + 1;
  |   41|      1|    int *hole = new int[range]();
  |   42|       |
  |   43|       |    // Copying all array values to pigeonhole
  |   44|     11|    for (int i = 0; i < N; i++) {
  |   45|     10|        hole[arr[i] - *min] = arr[i];
  |   46|     10|    }
  |   47|       |
  |   48|       |    // Deleting elements from list and storing to original array
  |   49|      1|    int count = 0;
  |   50|    914|    for (int i = 0; i < range; i++) {
  |   51|    923|        while (hole[i] != '\0') {
  |   52|     10|            arr[count] = hole[i];
  |   53|     10|            hole[i] = {};
  |   54|     10|            count++;
  |   55|     10|        }
  |   56|    913|    }
  |   57|      1|    delete[] hole;
  |   58|       |
  |   59|      1|    return arr;
  |   60|      1|}
  ------------------
  | _ZN7sorting10pigeonSortILm4EEESt5arrayIiXT_EES2_:
  |   34|      1|std::array<int, N> pigeonSort(std::array<int, N> arr) {
  |   35|       |    // Finding min and max*
  |   36|      1|    auto min = std::min_element(std::begin(arr), std::end(arr));
  |   37|      1|    auto max = std::max_element(std::begin(arr), std::end(arr));
  |   38|       |
  |   39|       |    // Range refers to the number of holes required
  |   40|      1|    int range = *max - *min + 1;
  |   41|      1|    int *hole = new int[range]();
  |   42|       |
  |   43|       |    // Copying all array values to pigeonhole
  |   44|      5|    for (int i = 0; i < N; i++) {
  |   45|      4|        hole[arr[i] - *min] = arr[i];
  |   46|      4|    }
  |   47|       |
  |   48|       |    // Deleting elements from list and storing to original array
  |   49|      1|    int count = 0;
  |   50|      5|    for (int i = 0; i < range; i++) {
  |   51|      8|        while (hole[i] != '\0') {
  |   52|      4|            arr[count] = hole[i];
  |   53|      4|            hole[i] = {};
  |   54|      4|            count++;
  |   55|      4|        }
  |   56|      4|    }
  |   57|      1|    delete[] hole;
  |   58|       |
  |   59|      1|    return arr;
  |   60|      1|}
  ------------------
   61|       |}  // namespace sorting
   62|       |
   63|       |/**
   64|       | * Test function 1 with unsorted array
   65|       | * {8, 3, 2, 7, 4, 6, 8}
   66|       | * @returns none
   67|       | */
   68|      1|static void test_1() {
   69|      1|    const int n = 7;
   70|      1|    std::array<int, n> test_array = {8, 3, 2, 7, 4, 6, 8};
   71|       |
   72|      1|    test_array = sorting::pigeonSort<n>(test_array);
   73|       |
   74|      1|    assert(std::is_sorted(std::begin(test_array), std::end(test_array)));
   75|       |
   76|       |    // Printing sorted array
   77|      8|    for (int i = 0; i < n; i++) {
   78|      7|        std::cout << test_array.at(i) << " ";
   79|      7|    }
   80|      1|    std::cout << "\nPassed\n";
   81|      1|}
   82|       |
   83|       |/**
   84|       | * Test function 2 with unsorted array
   85|       | * {802, 630, 20, 745, 52, 300, 612, 932, 78, 187}
   86|       | * @returns none
   87|       | */
   88|      1|static void test_2() {
   89|      1|    const int n = 10;
   90|      1|    std::array<int, n> test_array = {802, 630, 20,  745, 52,
   91|      1|                                     300, 612, 932, 78,  187};
   92|       |
   93|      1|    test_array = sorting::pigeonSort<n>(test_array);
   94|       |
   95|      1|    assert(std::is_sorted(std::begin(test_array), std::end(test_array)));
   96|       |
   97|       |    // Printing sorted array
   98|     11|    for (int i = 0; i < n; i++) {
   99|     10|        std::cout << test_array.at(i) << " ";
  100|     10|    }
  101|      1|    std::cout << "\nPassed\n";
  102|      1|}
  103|       |
  104|       |/**
  105|       | * Test function 1 with unsorted array
  106|       | * {11,13,12,14}
  107|       | * @returns none
  108|       | */
  109|      1|static void test_3() {
  110|      1|    const int n = 4;
  111|      1|    std::array<int, n> test_array = {11, 13, 12, 14};
  112|       |
  113|      1|    test_array = sorting::pigeonSort<n>(test_array);
  114|       |
  115|      1|    assert(std::is_sorted(std::begin(test_array), std::end(test_array)));
  116|       |
  117|       |    // Printing sorted array
  118|      5|    for (int i = 0; i < n; i++) {
  119|      4|        std::cout << test_array.at(i) << " ";
  120|      4|    }
  121|      1|    std::cout << "\nPassed\n";
  122|      1|}
  123|       |
  124|       |/**
  125|       | * Main function
  126|       | */
  127|      1|int main() {
  128|      1|    test_1();
  129|      1|    test_2();
  130|      1|    test_3();
  131|       |
  132|      1|    return 0;
  133|      1|}

