    1|       |#include <cmath>
    2|       |#include <cstdlib>
    3|       |#include <cstring>
    4|       |#include <iostream>
    5|       |
    6|      1|void radixsort(int a[], int n) {
    7|      1|    int count[10];
    8|      1|    int* output = new int[n];
    9|      1|    memset(output, 0, n * sizeof(*output));
   10|      1|    memset(count, 0, sizeof(count));
   11|      1|    int max = 0;
   12|      9|    for (int i = 0; i < n; ++i) {
   13|      8|        if (a[i] > max) {
   14|      2|            max = a[i];
   15|      2|        }
   16|      8|    }
   17|      1|    int maxdigits = 0;
   18|      4|    while (max) {
   19|      3|        maxdigits++;
   20|      3|        max /= 10;
   21|      3|    }
   22|      4|    for (int j = 0; j < maxdigits; j++) {
   23|     27|        for (int i = 0; i < n; i++) {
   24|     24|            int t = std::pow(10, j);
   25|     24|            count[(a[i] % (10 * t)) / t]++;
   26|     24|        }
   27|      3|        int k = 0;
   28|     33|        for (int p = 0; p < 10; p++) {
   29|    270|            for (int i = 0; i < n; i++) {
   30|    240|                int t = std::pow(10, j);
   31|    240|                if ((a[i] % (10 * t)) / t == p) {
   32|     24|                    output[k] = a[i];
   33|     24|                    k++;
   34|     24|                }
   35|    240|            }
   36|     30|        }
   37|      3|        memset(count, 0, sizeof(count));
   38|     27|        for (int i = 0; i < n; ++i) {
   39|     24|            a[i] = output[i];
   40|     24|        }
   41|      3|    }
   42|      1|    delete[] output;
   43|      1|}
   44|       |
   45|      1|void print(int a[], int n) {
   46|      9|    for (int i = 0; i < n; ++i) {
   47|      8|        std::cout << a[i] << " ";
   48|      8|    }
   49|      1|    std::cout << std::endl;
   50|      1|}
   51|       |
   52|      1|int main(int argc, char const* argv[]) {
   53|      1|    int a[] = {170, 45, 75, 90, 802, 24, 2, 66};
   54|      1|    int n = sizeof(a) / sizeof(a[0]);
   55|      1|    radixsort(a, n);
   56|      1|    print(a, n);
   57|      1|    return 0;
   58|      1|}

