    1|       |/**
    2|       | * @file
    3|       | * @brief Algorithm of [Radix sort](https://en.wikipedia.org/wiki/Radix_sort)
    4|       | * @author [Suyash Jaiswal](https://github.com/Suyashjaiswal)
    5|       | * @details
    6|       | * Sort the vector of unsigned integers using radix sort i.e. sorting digit by
    7|       | * digit using [Counting Sort](https://en.wikipedia.org/wiki/Counting_sort) as
    8|       | * subroutine. Running time of radix sort is O(d*(n+b)) where b is the base for
    9|       | * representing numbers and d in the max digits in input integers and n is
   10|       | * number of unsigned integers. consider example for n = 5, aray elements =
   11|       | * 432,234,143,332,123 sorting digit by digit sorting according to 1) 1st digit
   12|       | * place
   13|       | * => 432, 332, 143, 123, 234
   14|       | *
   15|       | * 2) 2nd digit place
   16|       | * => 123, 432, 332, 234, 143
   17|       | *
   18|       | * 3) 3rd digit place
   19|       | * => 123, 143, 234, 332, 432
   20|       | *
   21|       | * using count sort at each step, which is stable.
   22|       | * stable => already sorted according to previous digits.
   23|       | */
   24|       |
   25|       |/// header files
   26|       |
   27|       |#include <algorithm>  /// for collection of functions
   28|       |#include <cassert>  /// for a macro called assert which can be used to verify assumptions
   29|       |#include <cstdint>
   30|       |#include <iostream>  /// for io operations
   31|       |#include <vector>    /// for std::vector
   32|       |
   33|       |/**
   34|       | * @namespace sorting
   35|       | * @brief Sorting algorithms
   36|       | */
   37|       |namespace sorting {
   38|       |/**
   39|       | * @namespace radix_sort
   40|       | * @brief Functions for [Radix sort](https://en.wikipedia.org/wiki/Radix_sort)
   41|       | * algorithm
   42|       | */
   43|       |namespace radix_sort {
   44|       |/**
   45|       | * @brief Function to sort vector according to current digit using stable
   46|       | * sorting.
   47|       | * @param cur_digit - sort according to the cur_digit
   48|       | * @param ar - vector to be sorted
   49|       | * @returns std::vector sorted till ith digit
   50|       | */
   51|       |std::vector<uint64_t> step_ith(
   52|       |    uint16_t cur_digit,
   53|      7|    const std::vector<uint64_t>& ar) {  // sorting according to current digit.
   54|      7|    int n = ar.size();
   55|      7|    std::vector<uint32_t> position(10, 0);
   56|     66|    for (int i = 0; i < n; ++i) {
   57|     59|        position[(ar[i] / cur_digit) %
   58|     59|                 10]++;  // counting frequency of 0-9 at cur_digit.
   59|     59|    }
   60|      7|    int cur = 0;
   61|     77|    for (int i = 0; i < 10; ++i) {
   62|     70|        int a = position[i];
   63|     70|        position[i] = cur;  // assingning starting position of 0-9.
   64|     70|        cur += a;
   65|     70|    }
   66|      7|    std::vector<uint64_t> temp(n);
   67|     66|    for (int i = 0; i < n; ++i) {
   68|     59|        temp[position[(ar[i] / cur_digit) % 10]] =
   69|     59|            ar[i];  // storing ar[i] in ar[i]'s cur_digit expected position of
   70|       |                    // this step.
   71|     59|        position[(ar[i] / cur_digit) %
   72|     59|                 10]++;  // incrementing ar[i]'s cur_digit position by 1, as
   73|       |                         // current place used by ar[i].
   74|     59|    }
   75|      7|    return temp;
   76|      7|}
   77|       |/**
   78|       | * @brief Function to sort vector digit by digit.
   79|       | * @param ar - vector to be sorted
   80|       | * @returns sorted vector
   81|       | */
   82|      2|std::vector<uint64_t> radix(const std::vector<uint64_t>& ar) {
   83|      2|    uint64_t max_ele =
   84|      2|        *max_element(ar.begin(), ar.end());  // returns the max element.
   85|      2|    std::vector<uint64_t> temp = ar;
   86|      9|    for (int i = 1; max_ele / i > 0;
   87|      7|         i *= 10) {  // loop breaks when i > max_ele because no further digits
   88|       |                     // left to makes changes in aray.
   89|      7|        temp = step_ith(i, temp);
   90|      7|    }
   91|     16|    for (uint64_t i : temp) {
   92|     16|        std::cout << i << " ";
   93|     16|    }
   94|      2|    std::cout << "\n";
   95|      2|    return temp;
   96|      2|}
   97|       |}  // namespace radix_sort
   98|       |}  // namespace sorting
   99|       |
  100|       |/**
  101|       | * @brief Function to test the above algorithm
  102|       | * @returns none
  103|       | */
  104|      1|static void tests() {
  105|       |    /// Test 1
  106|      1|    std::vector<uint64_t> ar1 = {432, 234, 143, 332, 123};
  107|      1|    ar1 = sorting::radix_sort::radix(ar1);
  108|      1|    assert(std::is_sorted(ar1.begin(), ar1.end()));
  109|       |    /// Test 2
  110|      0|    std::vector<uint64_t> ar2 = {213, 3214, 123, 111, 112, 142,
  111|      1|                                 133, 132,  32,  12,  113};
  112|      1|    ar2 = sorting::radix_sort::radix(ar2);
  113|      1|    assert(std::is_sorted(ar2.begin(), ar2.end()));
  114|      1|}
  115|       |/**
  116|       | * @brief Main function
  117|       | * @returns 0 on exit
  118|       | */
  119|      1|int main() {
  120|      1|    tests();  // execute the tests
  121|      1|    return 0;
  122|      1|}

