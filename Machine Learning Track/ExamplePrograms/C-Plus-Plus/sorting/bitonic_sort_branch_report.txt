    1|       |// Source : https://www.geeksforgeeks.org/bitonic-sort/
    2|       |
    3|       |/* C++ Program for Bitonic Sort. Note that this program
    4|       |   works only when size of input is a power of 2. */
    5|       |
    6|       |#include <algorithm>
    7|       |#include <iostream>
    8|       |
    9|       |/*The parameter dir indicates the sorting direction, ASCENDING
   10|       |   or DESCENDING; if (a[i] > a[j]) agrees with the direction,
   11|       |   then a[i] and a[j] are interchanged.*/
   12|     24|void compAndSwap(int a[], int i, int j, int dir) {
   13|     24|    if (dir == (a[i] > a[j]))
   14|     13|        std::swap(a[i], a[j]);
   15|     24|}
   16|       |
   17|       |/*It recursively sorts a bitonic sequence in ascending order,
   18|       |  if dir = 1, and in descending order otherwise (means dir=0).
   19|       |  The sequence to be sorted starts at index position low,
   20|       |  the parameter cnt is the number of elements to be sorted.*/
   21|     41|void bitonicMerge(int a[], int low, int cnt, int dir) {
   22|     41|    if (cnt > 1) {
   23|     17|        int k = cnt / 2;
   24|     41|        for (int i = low; i < low + k; i++) compAndSwap(a, i, i + k, dir);
   25|     17|        bitonicMerge(a, low, k, dir);
   26|     17|        bitonicMerge(a, low + k, k, dir);
   27|     17|    }
   28|     41|}
   29|       |
   30|       |/* This function first produces a bitonic sequence by recursively
   31|       |    sorting its two halves in opposite sorting orders, and then
   32|       |    calls bitonicMerge to make them in the same order */
   33|     15|void bitonicSort(int a[], int low, int cnt, int dir) {
   34|     15|    if (cnt > 1) {
   35|      7|        int k = cnt / 2;
   36|       |
   37|       |        // sort in ascending order since dir here is 1
   38|      7|        bitonicSort(a, low, k, 1);
   39|       |
   40|       |        // sort in descending order since dir here is 0
   41|      7|        bitonicSort(a, low + k, k, 0);
   42|       |
   43|       |        // Will merge wole sequence in ascending order
   44|       |        // since dir=1.
   45|      7|        bitonicMerge(a, low, cnt, dir);
   46|      7|    }
   47|     15|}
   48|       |
   49|       |/* Caller of bitonicSort for sorting the entire array of
   50|       |   length N in ASCENDING order */
   51|      1|void sort(int a[], int N, int up) { bitonicSort(a, 0, N, up); }
   52|       |
   53|       |// Driver code
   54|      1|int main() {
   55|      1|    int a[] = {3, 7, 4, 8, 6, 2, 1, 5};
   56|      1|    int N = sizeof(a) / sizeof(a[0]);
   57|       |
   58|      1|    int up = 1;  // means sort in ascending order
   59|      1|    sort(a, N, up);
   60|       |
   61|      1|    std::cout << "Sorted array: \n";
   62|      9|    for (int i = 0; i < N; i++) std::cout << a[i] << " ";
   63|      1|    return 0;
   64|      1|}

