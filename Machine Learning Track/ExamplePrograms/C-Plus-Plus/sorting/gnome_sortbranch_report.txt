    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation of [gnome
    4|       | * sort](https://en.wikipedia.org/wiki/Gnome_sort) algorithm.
    5|       | * @author [beqakd](https://github.com/beqakd)
    6|       | * @author [Krishna Vedala](https://github.com/kvedala)
    7|       | * @details
    8|       | * Gnome sort algorithm is not the best one but it is widely used.
    9|       | * The algorithm iteratively checks the order of pairs in the array. If they are
   10|       | * on right order it moves to the next successive pair, otherwise it swaps
   11|       | * elements. This operation is repeated until no more swaps are made thus
   12|       | * indicating the values to be in ascending order.
   13|       | *
   14|       | * The time Complexity of the algorithm is \f$O(n^2)\f$ and in some cases it
   15|       | * can be \f$O(n)\f$.
   16|       | */
   17|       |
   18|       |#include <algorithm>  // for std::swap
   19|       |#include <array>      // for std::array
   20|       |#include <cassert>    // for assertions
   21|       |#include <iostream>   // for io operations
   22|       |
   23|       |/**
   24|       | * @namespace sorting
   25|       | * Sorting algorithms
   26|       | */
   27|       |namespace sorting {
   28|       |/**
   29|       | * This implementation is for a C-style array input that gets modified in place.
   30|       | * @param [in,out] arr our array of elements.
   31|       | * @param size size of given array
   32|       | */
   33|       |template <typename T>
   34|      1|void gnomeSort(T *arr, int size) {
   35|       |    // few easy cases
   36|      1|    if (size <= 1) {
   37|      0|        return;
   38|      0|    }
   39|       |
   40|      1|    int index = 0;  // initialize some variables.
   41|     21|    while (index < size) {
   42|       |        // check for swap
   43|     20|        if ((index == 0) || (arr[index] >= arr[index - 1])) {
   44|     13|            index++;
   45|     13|        } else {
   46|      7|            std::swap(arr[index], arr[index - 1]);  // swap
   47|      7|            index--;
   48|      7|        }
   49|     20|    }
   50|      1|}
   51|       |
   52|       |/**
   53|       | * This implementation is for a C++-style array input. The function argument is
   54|       | * a pass-by-value and hence a copy of the array gets created which is then
   55|       | * modified by the function and returned.
   56|       | * @tparam T type of data variables in the array
   57|       | * @tparam size size of the array
   58|       | * @param [in] arr our array of elements.
   59|       | * @return array with elements sorted
   60|       | */
   61|       |template <typename T, size_t size>
   62|      2|std::array<T, size> gnomeSort(std::array<T, size> arr) {
   63|       |    // few easy cases
   64|      2|    if (size <= 1) {
   65|      0|        return arr;
   66|      0|    }
   67|       |
   68|      2|    int index = 0;  // initialize loop index
   69|  19.5k|    while (index < size) {
   70|       |        // check for swap
   71|  19.5k|        if ((index == 0) || (arr[index] >= arr[index - 1])) {
   72|  9.87k|            index++;
   73|  9.87k|        } else {
   74|  9.67k|            std::swap(arr[index], arr[index - 1]);  // swap
   75|  9.67k|            index--;
   76|  9.67k|        }
   77|  19.5k|    }
   78|      2|    return arr;
   79|      2|}
  ------------------
  | _ZN7sorting9gnomeSortIdLm6EEESt5arrayIT_XT0_EES3_:
  |   62|      1|std::array<T, size> gnomeSort(std::array<T, size> arr) {
  |   63|       |    // few easy cases
  |   64|      1|    if (size <= 1) {
  |   65|      0|        return arr;
  |   66|      0|    }
  |   67|       |
  |   68|      1|    int index = 0;  // initialize loop index
  |   69|     25|    while (index < size) {
  |   70|       |        // check for swap
  |   71|     24|        if ((index == 0) || (arr[index] >= arr[index - 1])) {
  |   72|     15|            index++;
  |   73|     15|        } else {
  |   74|      9|            std::swap(arr[index], arr[index - 1]);  // swap
  |   75|      9|            index--;
  |   76|      9|        }
  |   77|     24|    }
  |   78|      1|    return arr;
  |   79|      1|}
  ------------------
  | _ZN7sorting9gnomeSortIfLm200EEESt5arrayIT_XT0_EES3_:
  |   62|      1|std::array<T, size> gnomeSort(std::array<T, size> arr) {
  |   63|       |    // few easy cases
  |   64|      1|    if (size <= 1) {
  |   65|      0|        return arr;
  |   66|      0|    }
  |   67|       |
  |   68|      1|    int index = 0;  // initialize loop index
  |   69|  19.5k|    while (index < size) {
  |   70|       |        // check for swap
  |   71|  19.5k|        if ((index == 0) || (arr[index] >= arr[index - 1])) {
  |   72|  9.86k|            index++;
  |   73|  9.86k|        } else {
  |   74|  9.66k|            std::swap(arr[index], arr[index - 1]);  // swap
  |   75|  9.66k|            index--;
  |   76|  9.66k|        }
  |   77|  19.5k|    }
  |   78|      1|    return arr;
  |   79|      1|}
  ------------------
   80|       |}  // namespace sorting
   81|       |
   82|       |/**
   83|       | * Test function
   84|       | */
   85|      1|static void test() {
   86|       |    // Example 1. Creating array of int,
   87|      1|    std::cout << "Test 1 - as a C-array...";
   88|      1|    const int size = 6;
   89|      1|    std::array<int, size> arr = {-22, 100, 150, 35, -10, 99};
   90|      1|    sorting::gnomeSort(arr.data(),
   91|      1|                       size);  // pass array data as a C-style array pointer
   92|      1|    assert(std::is_sorted(std::begin(arr), std::end(arr)));
   93|      0|    std::cout << " Passed\n";
   94|      7|    for (int i = 0; i < size; i++) {
   95|      6|        std::cout << arr[i] << ", ";
   96|      6|    }
   97|      1|    std::cout << std::endl;
   98|       |
   99|       |    // Example 2. Creating array of doubles.
  100|      1|    std::cout << "\nTest 2 - as a std::array...";
  101|      1|    std::array<double, size> double_arr = {-100.2, 10.2, 20.0, 9.0, 7.5, 7.2};
  102|      1|    std::array<double, size> sorted_arr = sorting::gnomeSort(double_arr);
  103|      1|    assert(std::is_sorted(std::begin(sorted_arr), std::end(sorted_arr)));
  104|      0|    std::cout << " Passed\n";
  105|      7|    for (int i = 0; i < size; i++) {
  106|      6|        std::cout << double_arr[i] << ", ";
  107|      6|    }
  108|      1|    std::cout << std::endl;
  109|       |
  110|       |    // Example 3. Creating random array of float.
  111|      1|    std::cout << "\nTest 3 - 200 random numbers as a std::array...";
  112|      1|    const int size2 = 200;
  113|      1|    std::array<float, size2> rand_arr{};
  114|       |
  115|    200|    for (auto &a : rand_arr) {
  116|       |        // generate random numbers between -5.0 and 4.99
  117|    200|        a = float(std::rand() % 1000 - 500) / 100.f;
  118|    200|    }
  119|       |
  120|      1|    std::array<float, size2> float_arr = sorting::gnomeSort(rand_arr);
  121|      1|    assert(std::is_sorted(std::begin(float_arr), std::end(float_arr)));
  122|      0|    std::cout << " Passed\n";
  123|       |    // for (int i = 0; i < size; i++) std::cout << double_arr[i] << ", ";
  124|      1|    std::cout << std::endl;
  125|      1|}
  126|       |
  127|       |/**
  128|       | * Our main function with example of sort method.
  129|       | */
  130|      1|int main() {
  131|      1|    test();
  132|      1|    return 0;
  133|      1|}

