    1|       |// Returns Sorted elements after performing Cocktail Selection Sort
    2|       |// It is a Sorting algorithm which chooses the minimum and maximum element in an
    3|       |// array simultaneously, and swaps it with the lowest and highest available
    4|       |// position iteratively or recursively
    5|       |
    6|       |#include <algorithm>
    7|       |#include <iostream>
    8|       |#include <vector>
    9|       |
   10|       |// Iterative Version
   11|       |
   12|      1|void CocktailSelectionSort(std::vector<int> *vec, int low, int high) {
   13|      1|    while (low <= high) {
   14|      0|        int minimum = (*vec)[low];
   15|      0|        int minimumindex = low;
   16|      0|        int maximum = (*vec)[high];
   17|      0|        int maximumindex = high;
   18|       |
   19|      0|        for (int i = low; i <= high; i++) {
   20|      0|            if ((*vec)[i] >= maximum) {
   21|      0|                maximum = (*vec)[i];
   22|      0|                maximumindex = i;
   23|      0|            }
   24|      0|            if ((*vec)[i] <= minimum) {
   25|      0|                minimum = (*vec)[i];
   26|      0|                minimumindex = i;
   27|      0|            }
   28|      0|        }
   29|      0|        if (low != maximumindex || high != minimumindex) {
   30|      0|            std::swap((*vec)[low], (*vec)[minimumindex]);
   31|      0|            std::swap((*vec)[high], (*vec)[maximumindex]);
   32|      0|        } else {
   33|      0|            std::swap((*vec)[low], (*vec)[high]);
   34|      0|        }
   35|       |
   36|      0|        low++;
   37|      0|        high--;
   38|      0|    }
   39|      1|}
   40|       |
   41|       |// Recursive Version
   42|       |
   43|      0|void CocktailSelectionSort_v2(std::vector<int> *vec, int low, int high) {
   44|      0|    if (low >= high)
   45|      0|        return;
   46|       |
   47|      0|    int minimum = (*vec)[low];
   48|      0|    int minimumindex = low;
   49|      0|    int maximum = (*vec)[high];
   50|      0|    int maximumindex = high;
   51|       |
   52|      0|    for (int i = low; i <= high; i++) {
   53|      0|        if ((*vec)[i] >= maximum) {
   54|      0|            maximum = (*vec)[i];
   55|      0|            maximumindex = i;
   56|      0|        }
   57|      0|        if ((*vec)[i] <= minimum) {
   58|      0|            minimum = (*vec)[i];
   59|      0|            minimumindex = i;
   60|      0|        }
   61|      0|    }
   62|      0|    if (low != maximumindex || high != minimumindex) {
   63|      0|        std::swap((*vec)[low], (*vec)[minimumindex]);
   64|      0|        std::swap((*vec)[high], (*vec)[maximumindex]);
   65|      0|    } else {
   66|      0|        std::swap((*vec)[low], (*vec)[high]);
   67|      0|    }
   68|       |
   69|      0|    CocktailSelectionSort(vec, low + 1, high - 1);
   70|      0|}
   71|       |
   72|       |// main function, select any one of iterative or recursive version
   73|       |
   74|      1|int main() {
   75|      1|    int n;
   76|      1|    std::cout << "Enter number of elements\n";
   77|      1|    std::cin >> n;
   78|      1|    std::vector<int> v(n);
   79|      1|    std::cout << "Enter all the elements\n";
   80|      1|    for (int i = 0; i < n; ++i) {
   81|      0|        std::cin >> v[i];
   82|      0|    }
   83|       |
   84|      1|    int method;
   85|      1|    std::cout << "Enter method: \n\t0: iterative\n\t1: recursive:\t";
   86|      1|    std::cin >> method;
   87|       |
   88|      1|    if (method == 0) {
   89|      1|        CocktailSelectionSort(&v, 0, n - 1);
   90|      1|    } else if (method == 1) {
   91|      0|        CocktailSelectionSort_v2(&v, 0, n - 1);
   92|      0|    } else {
   93|      0|        std::cerr << "Unknown method" << std::endl;
   94|      0|        return -1;
   95|      0|    }
   96|      1|    std::cout << "Sorted elements are\n";
   97|      1|    for (int i = 0; i < n; ++i) {
   98|      0|        std::cout << v[i] << " ";
   99|      0|    }
  100|       |
  101|      1|    return 0;
  102|      1|}

