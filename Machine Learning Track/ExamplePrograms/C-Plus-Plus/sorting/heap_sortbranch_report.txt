    1|       |/**
    2|       | * \file
    3|       | * \brief [Heap Sort Algorithm
    4|       | * (heap sort)](https://en.wikipedia.org/wiki/Heapsort) implementation
    5|       | *
    6|       | * \author [Ayaan Khan](http://github.com/ayaankhan98)
    7|       | *
    8|       | * \details
    9|       | *  Heap-sort is a comparison-based sorting algorithm.
   10|       | *  Heap-sort can be thought of as an improved selection sort:
   11|       | *  like selection sort, heap sort divides its input into a sorted
   12|       | *  and an unsorted region, and it iteratively shrinks the unsorted
   13|       | *  region by extracting the largest element from it and inserting
   14|       | *  it into the sorted region. Unlike selection sort,
   15|       | *  heap sort does not waste time with a linear-time scan of the
   16|       | *  unsorted region; rather, heap sort maintains the unsorted region
   17|       | *  in a heap data structure to more quickly find the largest element
   18|       | *  in each step.
   19|       | *
   20|       | *  Time Complexity - \f$O(n \log(n))\f$
   21|       | *
   22|       | */
   23|       |#include <algorithm>
   24|       |#include <cassert>
   25|       |#include <iostream>
   26|       |
   27|       |/**
   28|       | *
   29|       | * Utility function to print the array after
   30|       | * sorting.
   31|       | *
   32|       | * @param arr array to be printed
   33|       | * @param sz size of array
   34|       | *
   35|       | */
   36|       |template <typename T>
   37|      4|void printArray(T *arr, int sz) {
   38|     34|    for (int i = 0; i < sz; i++) std::cout << arr[i] << "  ";
   39|      4|    std::cout << "\n";
   40|      4|}
  ------------------
  | _Z10printArrayIiEvPT_i:
  |   37|      2|void printArray(T *arr, int sz) {
  |   38|     22|    for (int i = 0; i < sz; i++) std::cout << arr[i] << "  ";
  |   39|      2|    std::cout << "\n";
  |   40|      2|}
  ------------------
  | _Z10printArrayIdEvPT_i:
  |   37|      2|void printArray(T *arr, int sz) {
  |   38|     12|    for (int i = 0; i < sz; i++) std::cout << arr[i] << "  ";
  |   39|      2|    std::cout << "\n";
  |   40|      2|}
  ------------------
   41|       |
   42|       |/**
   43|       | *
   44|       | * \addtogroup sorting Sorting Algorithm
   45|       | * @{
   46|       | *
   47|       | * The heapify procedure can be thought of as building a heap from
   48|       | * the bottom up by successively sifting downward to establish the
   49|       | * heap property.
   50|       | *
   51|       | * @param arr array to be sorted
   52|       | * @param n size of array
   53|       | * @param i node position in Binary Tress or element position in
   54|       | *          Array to be compared with it's childern
   55|       | *
   56|       | */
   57|       |template <typename T>
   58|     51|void heapify(T *arr, int n, int i) {
   59|     51|    int largest = i;
   60|     51|    int l = 2 * i + 1;
   61|     51|    int r = 2 * i + 2;
   62|       |
   63|     51|    if (l < n && arr[l] > arr[largest])
   64|     20|        largest = l;
   65|       |
   66|     51|    if (r < n && arr[r] > arr[largest])
   67|      8|        largest = r;
   68|       |
   69|     51|    if (largest != i) {
   70|     21|        std::swap(arr[i], arr[largest]);
   71|     21|        heapify(arr, n, largest);
   72|     21|    }
   73|     51|}
  ------------------
  | _Z7heapifyIiEvPT_ii:
  |   58|     36|void heapify(T *arr, int n, int i) {
  |   59|     36|    int largest = i;
  |   60|     36|    int l = 2 * i + 1;
  |   61|     36|    int r = 2 * i + 2;
  |   62|       |
  |   63|     36|    if (l < n && arr[l] > arr[largest])
  |   64|     15|        largest = l;
  |   65|       |
  |   66|     36|    if (r < n && arr[r] > arr[largest])
  |   67|      6|        largest = r;
  |   68|       |
  |   69|     36|    if (largest != i) {
  |   70|     16|        std::swap(arr[i], arr[largest]);
  |   71|     16|        heapify(arr, n, largest);
  |   72|     16|    }
  |   73|     36|}
  ------------------
  | _Z7heapifyIdEvPT_ii:
  |   58|     15|void heapify(T *arr, int n, int i) {
  |   59|     15|    int largest = i;
  |   60|     15|    int l = 2 * i + 1;
  |   61|     15|    int r = 2 * i + 2;
  |   62|       |
  |   63|     15|    if (l < n && arr[l] > arr[largest])
  |   64|      5|        largest = l;
  |   65|       |
  |   66|     15|    if (r < n && arr[r] > arr[largest])
  |   67|      2|        largest = r;
  |   68|       |
  |   69|     15|    if (largest != i) {
  |   70|      5|        std::swap(arr[i], arr[largest]);
  |   71|      5|        heapify(arr, n, largest);
  |   72|      5|    }
  |   73|     15|}
  ------------------
   74|       |
   75|       |/**
   76|       | * Utilizes heapify procedure to sort
   77|       | * the array
   78|       | *
   79|       | * @param arr array to be sorted
   80|       | * @param n size of array
   81|       | *
   82|       | */
   83|       |template <typename T>
   84|      2|void heapSort(T *arr, int n) {
   85|     17|    for (int i = n - 1; i >= 0; i--) heapify(arr, n, i);
   86|       |
   87|     17|    for (int i = n - 1; i >= 0; i--) {
   88|     15|        std::swap(arr[0], arr[i]);
   89|     15|        heapify(arr, i, 0);
   90|     15|    }
   91|      2|}
  ------------------
  | _Z8heapSortIiEvPT_i:
  |   84|      1|void heapSort(T *arr, int n) {
  |   85|     11|    for (int i = n - 1; i >= 0; i--) heapify(arr, n, i);
  |   86|       |
  |   87|     11|    for (int i = n - 1; i >= 0; i--) {
  |   88|     10|        std::swap(arr[0], arr[i]);
  |   89|     10|        heapify(arr, i, 0);
  |   90|     10|    }
  |   91|      1|}
  ------------------
  | _Z8heapSortIdEvPT_i:
  |   84|      1|void heapSort(T *arr, int n) {
  |   85|      6|    for (int i = n - 1; i >= 0; i--) heapify(arr, n, i);
  |   86|       |
  |   87|      6|    for (int i = n - 1; i >= 0; i--) {
  |   88|      5|        std::swap(arr[0], arr[i]);
  |   89|      5|        heapify(arr, i, 0);
  |   90|      5|    }
  |   91|      1|}
  ------------------
   92|       |
   93|       |/**
   94|       | *
   95|       | * @}
   96|       | * Test cases to test the program
   97|       | *
   98|       | */
   99|      1|void test() {
  100|      1|    std::cout << "Test 1\n";
  101|      1|    int arr[] = {-10, 78, -1, -6, 7, 4, 94, 5, 99, 0};
  102|      1|    int sz = sizeof(arr) / sizeof(arr[0]);  // sz - size of array
  103|      1|    printArray(arr, sz);  // displaying the array before sorting
  104|      1|    heapSort(arr, sz);    // calling heapsort to sort the array
  105|      1|    printArray(arr, sz);  // display array after sorting
  106|      1|    assert(std::is_sorted(arr, arr + sz));
  107|      0|    std::cout << "Test 1 Passed\n========================\n";
  108|       |
  109|      1|    std::cout << "Test 2\n";
  110|      1|    double arr2[] = {4.5, -3.6, 7.6, 0, 12.9};
  111|      1|    sz = sizeof(arr2) / sizeof(arr2[0]);
  112|      1|    printArray(arr2, sz);
  113|      1|    heapSort(arr2, sz);
  114|      1|    printArray(arr2, sz);
  115|      1|    assert(std::is_sorted(arr2, arr2 + sz));
  116|      0|    std::cout << "Test 2 passed\n";
  117|      1|}
  118|       |
  119|       |/** Main function */
  120|      1|int main() {
  121|      1|    test();
  122|      1|    return 0;
  123|      1|}

