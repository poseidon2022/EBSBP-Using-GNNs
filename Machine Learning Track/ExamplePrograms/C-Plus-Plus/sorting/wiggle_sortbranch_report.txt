    1|       |/**
    2|       | * \addtogroup sorting Sorting Algorithms
    3|       | * @{
    4|       | * \file
    5|       | * \brief [Wiggle Sort Algorithm]
    6|       | * (https://leetcode.com/problems/wiggle-sort-ii/) Implementation
    7|       | *
    8|       | * \author [Roshan Kanwar](http://github.com/roshan0708)
    9|       | *
   10|       | * \details
   11|       | * Wiggle Sort sorts the array into a wave like array.
   12|       | * An array ‘arr[0..n-1]’ is sorted in wave form,
   13|       | * if arr[0] >= arr[1] <= arr[2] >= arr[3] <= arr[4] >= …..
   14|       | *
   15|       | * \example
   16|       | * arr = [1,1,5,6,1,4], after wiggle sort arr will become equal to [1,1,6,1,5,4]
   17|       | * arr = [2,8,9,1,7], after wiggle sort arr will become equal to [8,2,9,1,7]
   18|       | */
   19|       |
   20|       |#include <algorithm>
   21|       |#include <cassert>
   22|       |#include <cstdint>
   23|       |#include <ctime>
   24|       |#include <iostream>  /// for io operations
   25|       |#include <vector>
   26|       |
   27|       |/**
   28|       | * @namespace sorting
   29|       | * @brief Sorting algorithms
   30|       | */
   31|       |namespace sorting {
   32|       |/**
   33|       | * @namespace wiggle_sort
   34|       | * @brief Functions for [Wiggle
   35|       | * Sort](https://leetcode.com/problems/wiggle-sort-ii/) algorithm
   36|       | */
   37|       |namespace wiggle_sort {
   38|       |
   39|       |/**
   40|       | *
   41|       | * @brief Function used for sorting the elements in wave form.
   42|       | * @details
   43|       | * Checking whether the even indexed elements are greater than
   44|       | * their adjacent odd elements.
   45|       | * Traversing all even indexed elements of the input arr.
   46|       | * If current element is smaller than the previous odd element, swap them.
   47|       | * If current element is smaller than the next odd element, swap them.
   48|       | *
   49|       | * @param arr input array (unsorted elements)
   50|       | *
   51|       | */
   52|       |template <typename T>  // this allows to have vectors of ints, double, float,
   53|       |                       // etc
   54|      0|std::vector<T> wiggleSort(const std::vector<T> &arr) {
   55|      0|    uint32_t size = arr.size();
   56|       |
   57|      0|    std::vector<T> out(
   58|      0|        arr);  // create a copy of input vector. this way, the original input
   59|       |               // vector does not get modified. a sorted array is is returned.
   60|       |
   61|      0|    for (int i = 0; i < size; i += 2) {
   62|      0|        if (i > 0 && out[i - 1] > out[i]) {
   63|      0|            std::swap(out[i], out[i - 1]);  // swapping the two values
   64|      0|        }
   65|       |
   66|      0|        if (i < size - 1 && out[i] < out[i + 1]) {
   67|      0|            std::swap(out[i], out[i + 1]);  // swapping the two values
   68|      0|        }
   69|      0|    }
   70|       |
   71|      0|    return out;  // returns the sorted vector
   72|      0|}
   73|       |}  // namespace wiggle_sort
   74|       |}  // namespace sorting
   75|       |
   76|       |/**
   77|       | *
   78|       | * @brief Utility function used for printing the elements.
   79|       | * Prints elements of the array after they're sorted using wiggle sort
   80|       | * algorithm.
   81|       | *
   82|       | * @param arr array containing the sorted elements
   83|       | *
   84|       | */
   85|       |template <typename T>
   86|      0|static void displayElements(const std::vector<T> &arr) {
   87|      0|    uint32_t size = arr.size();
   88|       |
   89|      0|    std::cout << "Sorted elements are as follows: ";
   90|       |
   91|      0|    std::cout << "[";
   92|       |
   93|      0|    for (int i = 0; i < size; i++) {
   94|      0|        std::cout << arr[i];
   95|      0|        if (i != size - 1) {
   96|      0|            std::cout << ", ";
   97|      0|        }
   98|      0|    }
   99|       |
  100|      0|    std::cout << "]" << std::endl;
  101|      0|}
  102|       |
  103|       |/**
  104|       | * Test function
  105|       | * @returns void
  106|       | */
  107|      0|static void test() {
  108|      0|    std::srand(std::time(nullptr));  // initialize random number generator
  109|       |
  110|      0|    std::vector<float> data1(100);
  111|      0|    for (auto &d : data1) {  // generate random numbers between -5.0 and 4.99
  112|      0|        d = float(std::rand() % 1000 - 500) / 100.f;
  113|      0|    }
  114|       |
  115|      0|    std::vector<float> sorted = sorting::wiggle_sort::wiggleSort<float>(data1);
  116|       |
  117|      0|    displayElements(sorted);
  118|       |
  119|      0|    for (uint32_t j = 0; j < data1.size(); j += 2) {
  120|      0|        assert(data1[j] <= data1[j + 1] &&
  121|      0|               data1[j + 1] >= data1[j + 2]);  // check the validation condition
  122|      0|    }
  123|       |
  124|      0|    std::cout << "Test 1 passed\n";
  125|      0|}
  126|       |
  127|       |/** Driver Code */
  128|      0|int main() {
  129|      0|    test();
  130|      0|    return 0;
  131|      0|}
  132|       |
  133|       |/** @} */

