    1|       |// C++ program to sort an array using bucket sort
    2|       |#include <algorithm>
    3|       |#include <iostream>
    4|       |#include <vector>
    5|       |
    6|       |// Function to sort arr[] of size n using bucket sort
    7|      1|void bucketSort(float arr[], int n) {
    8|       |    // 1) Create n empty buckets
    9|      1|    std::vector<float> *b = new std::vector<float>[n];
   10|       |
   11|       |    // 2) Put array elements in different buckets
   12|      7|    for (int i = 0; i < n; i++) {
   13|      6|        int bi = n * arr[i];  // Index in bucket
   14|      6|        b[bi].push_back(arr[i]);
   15|      6|    }
   16|       |
   17|       |    // 3) Sort individual buckets
   18|      7|    for (int i = 0; i < n; i++) std::sort(b[i].begin(), b[i].end());
   19|       |
   20|       |    // 4) Concatenate all buckets into arr[]
   21|      1|    int index = 0;
   22|      7|    for (int i = 0; i < n; i++)
   23|     12|        for (int j = 0; j < b[i].size(); j++) arr[index++] = b[i][j];
   24|      1|    delete[] b;
   25|      1|}
   26|       |
   27|       |/* Driver program to test above funtion */
   28|      1|int main() {
   29|      1|    float arr[] = {0.897, 0.565, 0.656, 0.1234, 0.665, 0.3434};
   30|      1|    int n = sizeof(arr) / sizeof(arr[0]);
   31|      1|    bucketSort(arr, n);
   32|       |
   33|      1|    std::cout << "Sorted array is \n";
   34|      7|    for (int i = 0; i < n; i++) std::cout << arr[i] << " ";
   35|      1|    return 0;
   36|      1|}

