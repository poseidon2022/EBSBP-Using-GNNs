    1|       |/**
    2|       | * @file
    3|       | * @brief Evaluation of [Postfix Expression](https://en.wikipedia.org/wiki/Reverse_Polish_notation)
    4|       | * @author [Darshana Sarma](https://github.com/Darshana-Sarma)
    5|       | * @details
    6|       | * Create a stack to store operands (or values).
    7|       | * Scan the given expression and do following for every scanned element.
    8|       | * If the element is a number, push it into the stack
    9|       | * If the element is a operator, pop operands for the operator from stack.
   10|       | * Evaluate the operator and push the result back to the stack
   11|       | * When the expression is ended, the number in the stack is the final answer
   12|       | */
   13|       |#include <algorithm>  // for all_of
   14|       |#include <array>      // for std::array
   15|       |#include <cassert>    // for assert
   16|       |#include <iostream>   // for io operations
   17|       |#include <string>     // for stof
   18|       |
   19|       |/**
   20|       | * @namespace others
   21|       | * @brief Other algorithms
   22|       | */
   23|       |namespace others {
   24|       |/**
   25|       | * @namespace postfix_expression
   26|       | * @brief Functions for Postfix Expression algorithm
   27|       | */
   28|       |namespace postfix_expression {
   29|       | /**
   30|       | * @brief Creates an array to be used as stack for storing values
   31|       | */
   32|       |class Stack {
   33|       | public:
   34|       |    std::array<float, 20> stack{}; ///< Array which will be used to store numbers in the input
   35|       |    int stackTop = -1;            ///< Represents the index of the last value added to array. -1 means array is empty
   36|       |};
   37|       |
   38|       |/**
   39|       | * @brief Pushing operand, also called the number in the array to the stack
   40|       | * @param operand float value from the input array or evaluation
   41|       | * @param stack stack containing numbers
   42|       | * @returns none
   43|       | */
   44|     16|void push(float operand, Stack *stack) {
   45|     16|    stack->stackTop++;
   46|     16|    stack->stack[stack->stackTop] = operand;
   47|     16|}
   48|       |
   49|       |/**
   50|       | * @brief Popping operand, also called the number from the stack
   51|       | * @param stack stack containing numbers
   52|       | * @returns operand float on top of stack
   53|       | */
   54|     14|float pop(Stack *stack) {
   55|     14|    float operand = stack->stack[stack->stackTop];
   56|     14|    stack->stackTop--;
   57|     14|    return operand;
   58|     14|}
   59|       |
   60|       |/**
   61|       | * @brief Checks if scanned string is a number
   62|       | * @param s scanned string
   63|       | * @returns bool boolean value if string is number
   64|       | */
   65|     16|bool is_number(const std::string &s) {
   66|     16|    return !s.empty() && std::all_of(s.begin(), s.end(), ::isdigit);
   67|     16|}
   68|       |
   69|       |/**
   70|       | * @brief Evaluate answer using given last two operands from and operation
   71|       | * @param a second last added operand which will be used for evaluation
   72|       | * @param b last added operand which will be used for evaluation
   73|       | * @param operation to be performed with respective floats
   74|       | * @param stack containing numbers
   75|       | * @returns none
   76|       | */
   77|      7|void evaluate(float a, float b, const std::string &operation, Stack *stack) {
   78|      7|    float c = 0;
   79|      7|    const char *op = operation.c_str();
   80|      7|    switch (*op) {
   81|      3|        case '+':
   82|      3|            c = a + b; // Addition of numbers
   83|      3|            others::postfix_expression::push(c, stack);
   84|      3|            break;
   85|       |
   86|      1|        case '-':
   87|      1|            c = a - b; // Subtraction of numbers
   88|      1|            others::postfix_expression::push(c, stack);
   89|      1|            break;
   90|       |
   91|      2|        case '*':
   92|      2|            c = a * b; // Multiplication of numbers
   93|      2|            others::postfix_expression::push(c, stack);
   94|      2|            break;
   95|       |
   96|      1|        case '/':
   97|      1|            c = a / b; // Division of numbers
   98|      1|            others::postfix_expression::push(c, stack);
   99|      1|            break;
  100|       |
  101|      0|        default:
  102|      0|            std::cout << "Operator not defined\n";
  103|      0|            break;
  104|      7|    }
  105|      7|}
  106|       |
  107|       |/**
  108|       | * @brief Postfix Evaluation algorithm to compute the value from given input
  109|       | * array
  110|       | * @tparam N number of array size
  111|       | * @param input Array of characters consisting of numbers and operations
  112|       | * @returns stack[stackTop] returns the top value from the stack
  113|       | */
  114|       |template <std::size_t N>
  115|      2|float postfix_evaluation(std::array<std::string, N> input) {
  116|      2|    Stack stack;
  117|      2|    int j = 0;
  118|       |
  119|     18|    while (j < N) {
  120|     16|        std::string scan = input[j];
  121|     16|        if (is_number(scan)) {
  122|      9|            push(std::stof(scan), &stack);
  123|       |
  124|      9|        } else {
  125|      7|            float op2 = pop(&stack);
  126|      7|            float op1 = pop(&stack);
  127|       |
  128|      7|            evaluate(op1, op2, scan, &stack);
  129|      7|        }
  130|     16|        j++;
  131|     16|    }
  132|       |
  133|      2|    std::cout << stack.stack[stack.stackTop] << "\n";
  134|       |
  135|      2|    return stack.stack[stack.stackTop];
  136|      2|}
  ------------------
  | _ZN6others18postfix_expression18postfix_evaluationILm7EEEfSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEXT_EE:
  |  115|      1|float postfix_evaluation(std::array<std::string, N> input) {
  |  116|      1|    Stack stack;
  |  117|      1|    int j = 0;
  |  118|       |
  |  119|      8|    while (j < N) {
  |  120|      7|        std::string scan = input[j];
  |  121|      7|        if (is_number(scan)) {
  |  122|      4|            push(std::stof(scan), &stack);
  |  123|       |
  |  124|      4|        } else {
  |  125|      3|            float op2 = pop(&stack);
  |  126|      3|            float op1 = pop(&stack);
  |  127|       |
  |  128|      3|            evaluate(op1, op2, scan, &stack);
  |  129|      3|        }
  |  130|      7|        j++;
  |  131|      7|    }
  |  132|       |
  |  133|      1|    std::cout << stack.stack[stack.stackTop] << "\n";
  |  134|       |
  |  135|      1|    return stack.stack[stack.stackTop];
  |  136|      1|}
  ------------------
  | _ZN6others18postfix_expression18postfix_evaluationILm9EEEfSt5arrayINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEXT_EE:
  |  115|      1|float postfix_evaluation(std::array<std::string, N> input) {
  |  116|      1|    Stack stack;
  |  117|      1|    int j = 0;
  |  118|       |
  |  119|     10|    while (j < N) {
  |  120|      9|        std::string scan = input[j];
  |  121|      9|        if (is_number(scan)) {
  |  122|      5|            push(std::stof(scan), &stack);
  |  123|       |
  |  124|      5|        } else {
  |  125|      4|            float op2 = pop(&stack);
  |  126|      4|            float op1 = pop(&stack);
  |  127|       |
  |  128|      4|            evaluate(op1, op2, scan, &stack);
  |  129|      4|        }
  |  130|      9|        j++;
  |  131|      9|    }
  |  132|       |
  |  133|      1|    std::cout << stack.stack[stack.stackTop] << "\n";
  |  134|       |
  |  135|      1|    return stack.stack[stack.stackTop];
  |  136|      1|}
  ------------------
  137|       |}  // namespace postfix_expression
  138|       |}  // namespace others
  139|       |
  140|       |
  141|       |/**
  142|       | * @brief Test function 1 with input array
  143|       | * {'2', '3', '1', '*', '+', '9', '-'}
  144|       | * @returns none
  145|       | */
  146|      1|static void test_function_1() {
  147|      1|    std::array<std::string, 7> input = {"2", "3", "1", "*", "+", "9", "-"};
  148|       |
  149|      1|    float answer = others::postfix_expression::postfix_evaluation(input);
  150|       |
  151|      1|    assert(answer == -4);
  152|      1|}
  153|       |
  154|       |/**
  155|       | * @brief Test function 2 with input array
  156|       | * {'1', '2', '+', '2', '/', '5', '*', '7', '+'}
  157|       | * @returns none
  158|       | */
  159|      1|static void test_function_2() {
  160|      1|    std::array<std::string, 9> input = {"100", "200", "+", "2", "/",
  161|      1|                                        "5",   "*",   "7", "+"};
  162|      1|    float answer = others::postfix_expression::postfix_evaluation(input);
  163|       |
  164|      1|    assert(answer == 757);
  165|      1|}
  166|       |
  167|       |/**
  168|       | * @brief Main function
  169|       | * @returns 0 on exit
  170|       | */
  171|      1|int main() {
  172|      1|    test_function_1();
  173|      1|    test_function_2();
  174|       |
  175|      1|    std::cout << "\nTest implementations passed!\n";
  176|       |
  177|      1|    return 0;
  178|      1|}

