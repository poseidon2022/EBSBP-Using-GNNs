    1|       |#include <algorithm>
    2|       |#include <array>
    3|       |#include <iostream>
    4|       |#include <vector>
    5|       |//#include <boost/multiprecision/cpp_int.hpp>
    6|       |// using namespace boost::multiprecision;
    7|       |const int mx = 1e6 + 5;
    8|       |using ll = int64_t;
    9|       |
   10|       |std::array<ll, mx> parent;
   11|       |ll node, edge;
   12|       |std::vector<std::pair<ll, std::pair<ll, ll>>> edges;
   13|      0|void initial() {
   14|      0|    for (int i = 0; i < node + edge; ++i) {
   15|      0|        parent[i] = i;
   16|      0|    }
   17|      0|}
   18|       |
   19|      0|int root(int i) {
   20|      0|    while (parent[i] != i) {
   21|      0|        parent[i] = parent[parent[i]];
   22|      0|        i = parent[i];
   23|      0|    }
   24|      0|    return i;
   25|      0|}
   26|       |
   27|      0|void join(int x, int y) {
   28|      0|    int root_x = root(x);  // Disjoint set union by rank
   29|      0|    int root_y = root(y);
   30|      0|    parent[root_x] = root_y;
   31|      0|}
   32|       |
   33|      0|ll kruskal() {
   34|      0|    ll mincost = 0;
   35|      0|    for (int i = 0; i < edge; ++i) {
   36|      0|        ll x = edges[i].second.first;
   37|      0|        ll y = edges[i].second.second;
   38|      0|        if (root(x) != root(y)) {
   39|      0|            mincost += edges[i].first;
   40|      0|            join(x, y);
   41|      0|        }
   42|      0|    }
   43|      0|    return mincost;
   44|      0|}
   45|       |
   46|      1|int main() {
   47|      1|    while (true) {
   48|      1|        int from = 0, to = 0, cost = 0, totalcost = 0;
   49|      1|        std::cin >> node >> edge;  // Enter the nodes and edges
   50|      1|        if (node == 0 && edge == 0) {
   51|      1|            break;  // Enter 0 0 to break out
   52|      1|        }
   53|      0|        initial();  // Initialise the parent array
   54|      0|        for (int i = 0; i < edge; ++i) {
   55|      0|            std::cin >> from >> to >> cost;
   56|      0|            edges.emplace_back(make_pair(cost, std::make_pair(from, to)));
   57|      0|            totalcost += cost;
   58|      0|        }
   59|      0|        sort(edges.begin(), edges.end());
   60|      0|        std::cout << kruskal() << std::endl;
   61|      0|        edges.clear();
   62|      0|    }
   63|      1|    return 0;
   64|      1|}

