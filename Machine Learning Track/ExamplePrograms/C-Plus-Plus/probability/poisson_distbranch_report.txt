    1|       |/**
    2|       | * @file
    3|       | * @brief [Poisson
    4|       | * statistics](https://en.wikipedia.org/wiki/Poisson_distribution)
    5|       | *
    6|       | * The Poisson distribution counts how many
    7|       | * events occur over a set time interval.
    8|       | */
    9|       |#include <cmath>
   10|       |#include <iostream>
   11|       |
   12|       |/**
   13|       | * poisson rate:\n
   14|       | * calculate the events per unit time\n
   15|       | * e.g 5 dollars every 2 mins = 5 / 2 = 2.5
   16|       | */
   17|      1|double poisson_rate(double events, double timeframe) {
   18|      1|    return events / timeframe;
   19|      1|}
   20|       |
   21|       |/**
   22|       | *  calculate the expected value over a time
   23|       | * e.g rate of 2.5 over 10 mins = 2.5 x 10 = 25
   24|       | */
   25|      1|double poisson_expected(double rate, double time) { return rate * time; }
   26|       |
   27|       |/**
   28|       | * Compute factorial of a given number
   29|       | */
   30|     10|double fact(double x) {
   31|     10|    double x_fact = x;
   32|     38|    for (int i = x - 1; i > 0; i--) {
   33|     28|        x_fact *= i;
   34|     28|    }
   35|       |
   36|     10|    if (x_fact <= 0) {
   37|      2|        x_fact = 1;
   38|      2|    }
   39|     10|    return x_fact;
   40|     10|}
   41|       |
   42|       |/**
   43|       | * Find the probability of x successes in a Poisson dist.
   44|       | * \f[p(\mu,x) = \frac{\mu^x e^{-\mu}}{x!}\f]
   45|       | */
   46|     10|double poisson_x_successes(double expected, double x) {
   47|     10|    return (std::pow(expected, x) * std::exp(-expected)) / fact(x);
   48|     10|}
   49|       |
   50|       |/**
   51|       | * probability of a success in range for Poisson dist (inclusive, inclusive)
   52|       | * \f[P = \sum_i p(\mu,i)\f]
   53|       | */
   54|      1|double poisson_range_successes(double expected, double lower, double upper) {
   55|      1|    double probability = 0;
   56|     10|    for (int i = lower; i <= upper; i++) {
   57|      9|        probability += poisson_x_successes(expected, i);
   58|      9|    }
   59|      1|    return probability;
   60|      1|}
   61|       |
   62|       |/**
   63|       | * main function
   64|       | */
   65|      1|int main() {
   66|      1|    double rate, expected;
   67|      1|    rate = poisson_rate(3, 1);
   68|      1|    std::cout << "Poisson rate : " << rate << std::endl;
   69|       |
   70|      1|    expected = poisson_expected(rate, 2);
   71|      1|    std::cout << "Poisson expected : " << expected << std::endl;
   72|       |
   73|      1|    std::cout << "Poisson 0 successes : " << poisson_x_successes(expected, 0)
   74|      1|              << std::endl;
   75|      1|    std::cout << "Poisson 0-8 successes : "
   76|      1|              << poisson_range_successes(expected, 0, 8) << std::endl;
   77|       |
   78|      1|    return 0;
   79|      1|}

