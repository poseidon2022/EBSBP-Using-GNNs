    1|       |/**
    2|       | * @file
    3|       | * @brief [Binomial
    4|       | * distribution](https://en.wikipedia.org/wiki/Binomial_distribution) example
    5|       | *
    6|       | * The binomial distribution models the number of
    7|       | * successes in a sequence of n independent events
    8|       | *
    9|       | * Summary of variables used:
   10|       | * * n : number of trials
   11|       | * * p : probability of success
   12|       | * * x : desired successes
   13|       | */
   14|       |#include <cmath>
   15|       |#include <iostream>
   16|       |
   17|       |/** finds the expected value of a binomial distribution
   18|       | * \param [in] n
   19|       | * \param [in] p
   20|       | * \returns \f$\mu=np\f$
   21|       | */
   22|      1|double binomial_expected(double n, double p) { return n * p; }
   23|       |
   24|       |/** finds the variance of the binomial distribution
   25|       | * \param [in] n
   26|       | * \param [in] p
   27|       | * \returns \f$\sigma^2 = n\cdot p\cdot (1-p)\f$
   28|       | */
   29|      2|double binomial_variance(double n, double p) { return n * p * (1 - p); }
   30|       |
   31|       |/** finds the standard deviation of the binomial distribution
   32|       | * \param [in] n
   33|       | * \param [in] p
   34|       | * \returns \f$\sigma = \sqrt{\sigma^2} = \sqrt{n\cdot p\cdot (1-p)}\f$
   35|       | */
   36|      1|double binomial_standard_deviation(double n, double p) {
   37|      1|    return std::sqrt(binomial_variance(n, p));
   38|      1|}
   39|       |
   40|       |/** Computes n choose r
   41|       | * \param [in] n
   42|       | * \param [in] r
   43|       | * \returns \f$\displaystyle {n\choose r} =
   44|       | * \frac{n!}{r!(n-r)!} = \frac{n\times(n-1)\times(n-2)\times\cdots(n-r)}{r!}
   45|       | * \f$
   46|       | */
   47|     57|double nCr(double n, double r) {
   48|     57|    double numerator = n;
   49|     57|    double denominator = r;
   50|       |
   51|  4.09k|    for (int i = n - 1; i >= ((n - r) + 1); i--) {
   52|  4.03k|        numerator *= i;
   53|  4.03k|    }
   54|       |
   55|  4.09k|    for (int i = 1; i < r; i++) {
   56|  4.03k|        denominator *= i;
   57|  4.03k|    }
   58|       |
   59|     57|    return numerator / denominator;
   60|     57|}
   61|       |
   62|       |/** calculates the probability of exactly x successes
   63|       | * \returns \f$\displaystyle P(n,p,x) = {n\choose x} p^x (1-p)^{n-x}\f$
   64|       | */
   65|      1|double binomial_x_successes(double n, double p, double x) {
   66|      1|    return nCr(n, x) * std::pow(p, x) * std::pow(1 - p, n - x);
   67|      1|}
   68|       |
   69|       |/** calculates the probability of a result within a range (inclusive, inclusive)
   70|       | * \returns \f$\displaystyle \left.P(n,p)\right|_{x_0}^{x_1} =
   71|       | * \sum_{i=x_0}^{x_1} P(i)
   72|       | * =\sum_{i=x_0}^{x_1} {n\choose i} p^i (1-p)^{n-i}\f$
   73|       | */
   74|       |double binomial_range_successes(double n, double p, double lower_bound,
   75|      1|                                double upper_bound) {
   76|      1|    double probability = 0;
   77|     57|    for (int i = lower_bound; i <= upper_bound; i++) {
   78|     56|        probability += nCr(n, i) * std::pow(p, i) * std::pow(1 - p, n - i);
   79|     56|    }
   80|      1|    return probability;
   81|      1|}
   82|       |
   83|       |/** main function */
   84|      1|int main() {
   85|      1|    std::cout << "expected value : " << binomial_expected(100, 0.5)
   86|      1|              << std::endl;
   87|       |
   88|      1|    std::cout << "variance : " << binomial_variance(100, 0.5) << std::endl;
   89|       |
   90|      1|    std::cout << "standard deviation : "
   91|      1|              << binomial_standard_deviation(100, 0.5) << std::endl;
   92|       |
   93|      1|    std::cout << "exactly 30 successes : " << binomial_x_successes(100, 0.5, 30)
   94|      1|              << std::endl;
   95|       |
   96|      1|    std::cout << "45 or more successes : "
   97|      1|              << binomial_range_successes(100, 0.5, 45, 100) << std::endl;
   98|       |
   99|      1|    return 0;
  100|      1|}

