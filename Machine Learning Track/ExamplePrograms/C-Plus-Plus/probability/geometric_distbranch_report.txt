    1|       |/**
    2|       | * @file
    3|       | * @brief [Geometric
    4|       | * Distribution](https://en.wikipedia.org/wiki/Geometric_distribution)
    5|       | *
    6|       | * @details
    7|       | * The geometric distribution models the experiment of doing Bernoulli trials
    8|       | * until a sucess was observed. There are two formulations of the geometric
    9|       | * distribution: 1) The probability distribution of the number X of Bernoulli
   10|       | * trials needed to get one success, supported on the set { 1, 2, 3, ... } 2)
   11|       | * The probability distribution of the number Y = X âˆ’ 1 of failures before the
   12|       | * first success, supported on the set { 0, 1, 2, 3, ... } Here, the first one
   13|       | * is implemented.
   14|       | *
   15|       | * Common variables used:
   16|       | * p - The success probability
   17|       | * k - The number of tries
   18|       | *
   19|       | * @author [Domenic Zingsheim](https://github.com/DerAndereDomenic)
   20|       | */
   21|       |
   22|       |#include <cassert>   /// for assert
   23|       |#include <cmath>     /// for math functions
   24|       |#include <cstdint>   /// for fixed size data types
   25|       |#include <ctime>     /// for time to initialize rng
   26|       |#include <iostream>  /// for std::cout
   27|       |#include <limits>    /// for std::numeric_limits
   28|       |#include <random>    /// for random numbers
   29|       |#include <vector>    /// for std::vector
   30|       |
   31|       |/**
   32|       | * @namespace probability
   33|       | * @brief Probability algorithms
   34|       | */
   35|       |namespace probability {
   36|       |/**
   37|       | * @namespace geometric_dist
   38|       | * @brief Functions for the [Geometric
   39|       | * Distribution](https://en.wikipedia.org/wiki/Geometric_distribution) algorithm
   40|       | * implementation
   41|       | */
   42|       |namespace geometric_dist {
   43|       |/**
   44|       | * @brief Returns a random number between [0,1]
   45|       | * @returns A uniformly distributed random number between 0 (included) and 1
   46|       | * (included)
   47|       | */
   48|  3.00M|float generate_uniform() {
   49|  3.00M|    return static_cast<float>(rand()) / static_cast<float>(RAND_MAX);
   50|  3.00M|}
   51|       |
   52|       |/**
   53|       | * @brief A class to model the geometric distribution
   54|       | */
   55|       |class geometric_distribution {
   56|       | private:
   57|       |    float p;  ///< The succes probability p
   58|       |
   59|       | public:
   60|       |    /**
   61|       |     * @brief Constructor for the geometric distribution
   62|       |     * @param p The success probability
   63|       |     */
   64|      3|    explicit geometric_distribution(const float& p) : p(p) {}
   65|       |
   66|       |    /**
   67|       |     * @brief The expected value of a geometrically distributed random variable
   68|       |     * X
   69|       |     * @returns E[X] = 1/p
   70|       |     */
   71|      6|    float expected_value() const { return 1.0f / p; }
   72|       |
   73|       |    /**
   74|       |     * @brief The variance of a geometrically distributed random variable X
   75|       |     * @returns V[X] = (1 - p) / p^2
   76|       |     */
   77|      9|    float variance() const { return (1.0f - p) / (p * p); }
   78|       |
   79|       |    /**
   80|       |     * @brief The standard deviation of a geometrically distributed random
   81|       |     * variable X
   82|       |     * @returns \sigma = \sqrt{V[X]}
   83|       |     */
   84|      3|    float standard_deviation() const { return std::sqrt(variance()); }
   85|       |
   86|       |    /**
   87|       |     * @brief The probability density function
   88|       |     * @details As we use the first definition of the geometric series (1),
   89|       |     * we are doing k - 1 failed trials and the k-th trial is a success.
   90|       |     * @param k The number of trials to observe the first success in [1,\infty)
   91|       |     * @returns A number between [0,1] according to p * (1-p)^{k-1}
   92|       |     */
   93|      3|    float probability_density(const uint32_t& k) const {
   94|      3|        return std::pow((1.0f - p), static_cast<float>(k - 1)) * p;
   95|      3|    }
   96|       |
   97|       |    /**
   98|       |     * @brief The cumulative distribution function
   99|       |     * @details The sum of all probabilities up to (and including) k trials.
  100|       |     * Basically CDF(k) = P(x <= k)
  101|       |     * @param k The number of trials in [1,\infty)
  102|       |     * @returns The probability to have success within k trials
  103|       |     */
  104|     18|    float cumulative_distribution(const uint32_t& k) const {
  105|     18|        return 1.0f - std::pow((1.0f - p), static_cast<float>(k));
  106|     18|    }
  107|       |
  108|       |    /**
  109|       |     * @brief The inverse cumulative distribution function
  110|       |     * @details This functions answers the question: Up to how many trials are
  111|       |     * needed to have success with a probability of cdf? The exact floating
  112|       |     * point value is reported.
  113|       |     * @param cdf The probability in [0,1]
  114|       |     * @returns The number of (exact) trials.
  115|       |     */
  116|  3.00M|    float inverse_cumulative_distribution(const float& cdf) const {
  117|  3.00M|        return std::log(1.0f - cdf) / std::log(1.0f - p);
  118|  3.00M|    }
  119|       |
  120|       |    /**
  121|       |     * @brief Generates a (discrete) sample according to the geometrical
  122|       |     * distribution
  123|       |     * @returns A geometrically distributed number in [1,\infty)
  124|       |     */
  125|  3.00M|    uint32_t draw_sample() const {
  126|  3.00M|        float uniform_sample = generate_uniform();
  127|  3.00M|        return static_cast<uint32_t>(
  128|  3.00M|                   inverse_cumulative_distribution(uniform_sample)) +
  129|  3.00M|               1;
  130|  3.00M|    }
  131|       |
  132|       |    /**
  133|       |     * @brief This function computes the probability to have success in a given
  134|       |     * range of tries
  135|       |     * @details Computes P(min_tries <= x <= max_tries).
  136|       |     * Can be used to calculate P(x >= min_tries) by not passing a second
  137|       |     * argument. Can be used to calculate P(x <= max_tries) by passing 1 as the
  138|       |     * first argument
  139|       |     * @param min_tries The minimum number of tries in [1,\infty) (inclusive)
  140|       |     * @param max_tries The maximum number of tries in [min_tries, \infty)
  141|       |     * (inclusive)
  142|       |     * @returns The probability of having success within a range of tries
  143|       |     * [min_tries, max_tries]
  144|       |     */
  145|       |    float range_tries(const uint32_t& min_tries = 1,
  146|       |                      const uint32_t& max_tries =
  147|      9|                          std::numeric_limits<uint32_t>::max()) const {
  148|      9|        float cdf_lower = cumulative_distribution(min_tries - 1);
  149|      9|        float cdf_upper = max_tries == std::numeric_limits<uint32_t>::max()
  150|      9|                              ? 1.0f
  151|      9|                              : cumulative_distribution(max_tries);
  152|      9|        return cdf_upper - cdf_lower;
  153|      9|    }
  154|       |};
  155|       |}  // namespace geometric_dist
  156|       |}  // namespace probability
  157|       |
  158|       |/**
  159|       | * @brief Tests the sampling method of the geometric distribution
  160|       | * @details Draws 1000000 random samples and estimates mean and variance
  161|       | * These should be close to the expected value and variance of the given
  162|       | * distribution to pass.
  163|       | * @param dist The distribution to test
  164|       | */
  165|       |void sample_test(
  166|      3|    const probability::geometric_dist::geometric_distribution& dist) {
  167|      3|    uint32_t n_tries = 1000000;
  168|      3|    std::vector<float> tries;
  169|      3|    tries.resize(n_tries);
  170|       |
  171|      3|    float mean = 0.0f;
  172|  3.00M|    for (uint32_t i = 0; i < n_tries; ++i) {
  173|  3.00M|        tries[i] = static_cast<float>(dist.draw_sample());
  174|  3.00M|        mean += tries[i];
  175|  3.00M|    }
  176|       |
  177|      3|    mean /= static_cast<float>(n_tries);
  178|       |
  179|      3|    float var = 0.0f;
  180|  3.00M|    for (uint32_t i = 0; i < n_tries; ++i) {
  181|  3.00M|        var += (tries[i] - mean) * (tries[i] - mean);
  182|  3.00M|    }
  183|       |
  184|       |    // Unbiased estimate of variance
  185|      3|    var /= static_cast<float>(n_tries - 1);
  186|       |
  187|      3|    std::cout << "This value should be near " << dist.expected_value() << ": "
  188|      3|              << mean << std::endl;
  189|      3|    std::cout << "This value should be near " << dist.variance() << ": " << var
  190|      3|              << std::endl;
  191|      3|}
  192|       |
  193|       |/**
  194|       | * @brief Self-test implementations
  195|       | * @returns void
  196|       | */
  197|      1|static void test() {
  198|      1|    probability::geometric_dist::geometric_distribution dist(0.3);
  199|       |
  200|      1|    const float threshold = 1e-3f;
  201|       |
  202|      1|    std::cout << "Starting tests for p = 0.3..." << std::endl;
  203|      1|    assert(std::abs(dist.expected_value() - 3.33333333f) < threshold);
  204|      0|    assert(std::abs(dist.variance() - 7.77777777f) < threshold);
  205|      0|    assert(std::abs(dist.standard_deviation() - 2.788866755) < threshold);
  206|      0|    assert(std::abs(dist.probability_density(5) - 0.07203) < threshold);
  207|      0|    assert(std::abs(dist.cumulative_distribution(6) - 0.882351) < threshold);
  208|      0|    assert(std::abs(dist.inverse_cumulative_distribution(
  209|      1|                        dist.cumulative_distribution(8)) -
  210|      1|                    8) < threshold);
  211|      0|    assert(std::abs(dist.range_tries() - 1.0f) < threshold);
  212|      0|    assert(std::abs(dist.range_tries(3) - 0.49f) < threshold);
  213|      0|    assert(std::abs(dist.range_tries(5, 11) - 0.2203267f) < threshold);
  214|      0|    std::cout << "All tests passed" << std::endl;
  215|      1|    sample_test(dist);
  216|       |
  217|      1|    dist = probability::geometric_dist::geometric_distribution(0.5f);
  218|       |
  219|      1|    std::cout << "Starting tests for p = 0.5..." << std::endl;
  220|      1|    assert(std::abs(dist.expected_value() - 2.0f) < threshold);
  221|      0|    assert(std::abs(dist.variance() - 2.0f) < threshold);
  222|      0|    assert(std::abs(dist.standard_deviation() - 1.4142135f) < threshold);
  223|      0|    assert(std::abs(dist.probability_density(5) - 0.03125) < threshold);
  224|      0|    assert(std::abs(dist.cumulative_distribution(6) - 0.984375) < threshold);
  225|      0|    assert(std::abs(dist.inverse_cumulative_distribution(
  226|      1|                        dist.cumulative_distribution(8)) -
  227|      1|                    8) < threshold);
  228|      0|    assert(std::abs(dist.range_tries() - 1.0f) < threshold);
  229|      0|    assert(std::abs(dist.range_tries(3) - 0.25f) < threshold);
  230|      0|    assert(std::abs(dist.range_tries(5, 11) - 0.062011f) < threshold);
  231|      0|    std::cout << "All tests passed" << std::endl;
  232|      1|    sample_test(dist);
  233|       |
  234|      1|    dist = probability::geometric_dist::geometric_distribution(0.8f);
  235|       |
  236|      1|    std::cout << "Starting tests for p = 0.8..." << std::endl;
  237|      1|    assert(std::abs(dist.expected_value() - 1.25f) < threshold);
  238|      0|    assert(std::abs(dist.variance() - 0.3125f) < threshold);
  239|      0|    assert(std::abs(dist.standard_deviation() - 0.559016f) < threshold);
  240|      0|    assert(std::abs(dist.probability_density(5) - 0.00128) < threshold);
  241|      0|    assert(std::abs(dist.cumulative_distribution(6) - 0.999936) < threshold);
  242|      0|    assert(std::abs(dist.inverse_cumulative_distribution(
  243|      1|                        dist.cumulative_distribution(8)) -
  244|      1|                    8) < threshold);
  245|      0|    assert(std::abs(dist.range_tries() - 1.0f) < threshold);
  246|      0|    assert(std::abs(dist.range_tries(3) - 0.04f) < threshold);
  247|      0|    assert(std::abs(dist.range_tries(5, 11) - 0.00159997f) < threshold);
  248|      0|    std::cout << "All tests have successfully passed!" << std::endl;
  249|      1|    sample_test(dist);
  250|      1|}
  251|       |
  252|       |/**
  253|       | * @brief Main function
  254|       | * @return 0 on exit
  255|       | */
  256|      1|int main() {
  257|      1|    srand(time(nullptr));
  258|      1|    test();  // run self-test implementations
  259|      1|    return 0;
  260|      1|}

