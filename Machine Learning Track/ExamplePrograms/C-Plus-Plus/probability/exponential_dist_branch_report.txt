    1|       |/**
    2|       | * @file
    3|       | * @brief [Exponential
    4|       | * Distribution](https://en.wikipedia.org/wiki/Exponential_distribution)
    5|       | *
    6|       | * The exponential distribution is used to model
    7|       | * events occuring between a Poisson process like radioactive decay.
    8|       | *
    9|       | * \f[P(x, \lambda) = \lambda e^{-\lambda x}\f]
   10|       | *
   11|       | * Summary of variables used:
   12|       | * \f$\lambda\f$ : rate parameter
   13|       | */
   14|       |
   15|       |#include <cassert>    // For assert
   16|       |#include <cmath>      // For std::pow
   17|       |#include <iostream>   // For I/O operation
   18|       |#include <stdexcept>  // For std::invalid_argument
   19|       |#include <string>     // For std::string
   20|       |
   21|       |/**
   22|       | * @namespace probability
   23|       | * @brief Probability algorithms
   24|       | */
   25|       |namespace probability {
   26|       |/**
   27|       | * @namespace exponential_dist
   28|       | * @brief Functions for the [Exponential
   29|       | * Distribution](https://en.wikipedia.org/wiki/Exponential_distribution)
   30|       | * algorithm implementation
   31|       | */
   32|       |namespace geometric_dist {
   33|       |/**
   34|       | * @brief the expected value of the exponential distribution
   35|       | * @returns \f[\mu = \frac{1}{\lambda}\f]
   36|       | */
   37|      5|double exponential_expected(double lambda) {
   38|      5|    if (lambda <= 0) {
   39|      2|        throw std::invalid_argument("lambda must be greater than 0");
   40|      2|    }
   41|      3|    return 1 / lambda;
   42|      5|}
   43|       |
   44|       |/**
   45|       | * @brief the variance of the exponential distribution
   46|       | * @returns \f[\sigma^2 = \frac{1}{\lambda^2}\f]
   47|       | */
   48|      3|double exponential_var(double lambda) {
   49|      3|    if (lambda <= 0) {
   50|      0|        throw std::invalid_argument("lambda must be greater than 0");
   51|      0|    }
   52|      3|    return 1 / pow(lambda, 2);
   53|      3|}
   54|       |
   55|       |/**
   56|       | * @brief the standard deviation of the exponential distribution
   57|       | * @returns \f[\sigma = \frac{1}{\lambda}\f]
   58|       | */
   59|      3|double exponential_std(double lambda) {
   60|      3|    if (lambda <= 0) {
   61|      0|        throw std::invalid_argument("lambda must be greater than 0");
   62|      0|    }
   63|      3|    return 1 / lambda;
   64|      3|}
   65|       |}  // namespace geometric_dist
   66|       |}  // namespace probability
   67|       |
   68|       |/**
   69|       | * @brief Self-test implementations
   70|       | * @returns void
   71|       | */
   72|      1|static void test() {
   73|      1|    double lambda_1 = 1;
   74|      1|    double expected_1 = 1;
   75|      1|    double var_1 = 1;
   76|      1|    double std_1 = 1;
   77|       |
   78|      1|    double lambda_2 = 2;
   79|      1|    double expected_2 = 0.5;
   80|      1|    double var_2 = 0.25;
   81|      1|    double std_2 = 0.5;
   82|       |
   83|      1|    double lambda_3 = 3;
   84|      1|    double expected_3 = 0.333333;
   85|      1|    double var_3 = 0.111111;
   86|      1|    double std_3 = 0.333333;
   87|       |
   88|      1|    double lambda_4 = 0;     // Test 0
   89|      1|    double lambda_5 = -2.3;  // Test negative value
   90|       |
   91|      1|    const float threshold = 1e-3f;
   92|       |
   93|      1|    std::cout << "Test for lambda = 1 \n";
   94|      1|    assert(
   95|      1|        std::abs(expected_1 - probability::geometric_dist::exponential_expected(
   96|      1|                                  lambda_1)) < threshold);
   97|      0|    assert(std::abs(var_1 - probability::geometric_dist::exponential_var(
   98|      1|                                lambda_1)) < threshold);
   99|      0|    assert(std::abs(std_1 - probability::geometric_dist::exponential_std(
  100|      1|                                lambda_1)) < threshold);
  101|      0|    std::cout << "ALL TEST PASSED\n\n";
  102|       |
  103|      1|    std::cout << "Test for lambda = 2 \n";
  104|      1|    assert(
  105|      1|        std::abs(expected_2 - probability::geometric_dist::exponential_expected(
  106|      1|                                  lambda_2)) < threshold);
  107|      0|    assert(std::abs(var_2 - probability::geometric_dist::exponential_var(
  108|      1|                                lambda_2)) < threshold);
  109|      0|    assert(std::abs(std_2 - probability::geometric_dist::exponential_std(
  110|      1|                                lambda_2)) < threshold);
  111|      0|    std::cout << "ALL TEST PASSED\n\n";
  112|       |
  113|      1|    std::cout << "Test for lambda = 3 \n";
  114|      1|    assert(
  115|      1|        std::abs(expected_3 - probability::geometric_dist::exponential_expected(
  116|      1|                                  lambda_3)) < threshold);
  117|      0|    assert(std::abs(var_3 - probability::geometric_dist::exponential_var(
  118|      1|                                lambda_3)) < threshold);
  119|      0|    assert(std::abs(std_3 - probability::geometric_dist::exponential_std(
  120|      1|                                lambda_3)) < threshold);
  121|      0|    std::cout << "ALL TEST PASSED\n\n";
  122|       |
  123|      1|    std::cout << "Test for lambda = 0 \n";
  124|      1|    try {
  125|      1|        probability::geometric_dist::exponential_expected(lambda_4);
  126|      1|        probability::geometric_dist::exponential_var(lambda_4);
  127|      1|        probability::geometric_dist::exponential_std(lambda_4);
  128|      1|    } catch (std::invalid_argument& err) {
  129|      1|        assert(std::string(err.what()) == "lambda must be greater than 0");
  130|      1|    }
  131|      1|    std::cout << "ALL TEST PASSED\n\n";
  132|       |
  133|      1|    std::cout << "Test for lambda = -2.3 \n";
  134|      1|    try {
  135|      1|        probability::geometric_dist::exponential_expected(lambda_5);
  136|      1|        probability::geometric_dist::exponential_var(lambda_5);
  137|      1|        probability::geometric_dist::exponential_std(lambda_5);
  138|      1|    } catch (std::invalid_argument& err) {
  139|      1|        assert(std::string(err.what()) == "lambda must be greater than 0");
  140|      1|    }
  141|      1|    std::cout << "ALL TEST PASSED\n\n";
  142|      1|}
  143|       |
  144|       |/**
  145|       | * @brief Main function
  146|       | * @return 0 on exit
  147|       | */
  148|      1|int main() {
  149|      1|    test();  // Self test implementation
  150|      1|    return 0;
  151|      1|}

