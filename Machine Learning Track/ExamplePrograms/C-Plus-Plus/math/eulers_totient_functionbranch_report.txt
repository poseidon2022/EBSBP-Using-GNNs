    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation of [Euler's
    4|       | * Totient](https://en.wikipedia.org/wiki/Euler%27s_totient_function)
    5|       | * @description
    6|       | * Euler Totient Function is also known as phi function.
    7|       | * \f[\phi(n) =
    8|       | * \phi\left({p_1}^{a_1}\right)\cdot\phi\left({p_2}^{a_2}\right)\ldots\f] where
    9|       | * \f$p_1\f$, \f$p_2\f$, \f$\ldots\f$ are prime factors of n.
   10|       | * <br/>3 Euler's properties:
   11|       | * 1. \f$\phi(n) = n-1\f$
   12|       | * 2. \f$\phi(n^k) = n^k - n^{k-1}\f$
   13|       | * 3. \f$\phi(a,b) = \phi(a)\cdot\phi(b)\f$ where a and b are relative primes.
   14|       | *
   15|       | * Applying this 3 properties on the first equation.
   16|       | * \f[\phi(n) =
   17|       | * n\cdot\left(1-\frac{1}{p_1}\right)\cdot\left(1-\frac{1}{p_2}\right)\cdots\f]
   18|       | * where \f$p_1\f$,\f$p_2\f$... are prime factors.
   19|       | * Hence Implementation in \f$O\left(\sqrt{n}\right)\f$.
   20|       | * <br/>Some known values are:
   21|       | * * \f$\phi(100) = 40\f$
   22|       | * * \f$\phi(1) = 1\f$
   23|       | * * \f$\phi(17501) = 15120\f$
   24|       | * * \f$\phi(1420) = 560\f$
   25|       | * @author [Mann Mehta](https://github.com/mann2108)
   26|       | */
   27|       |
   28|       |#include <cassert>   /// for assert
   29|       |#include <cstdint>
   30|       |#include <iostream>  /// for IO operations
   31|       |
   32|       |/**
   33|       | * @brief Mathematical algorithms
   34|       | * @namespace
   35|       | */
   36|       |namespace math {
   37|       |/**
   38|       | * @brief Function to calculate Euler's Totient
   39|       | * @param n the number to find the Euler's Totient of
   40|       | */
   41|      7|uint64_t phiFunction(uint64_t n) {
   42|      7|    uint64_t result = n;
   43|  13.1k|    for (uint64_t i = 2; i * i <= n; i++) {
   44|  13.1k|        if (n % i != 0)
   45|  13.1k|            continue;
   46|     28|        while (n % i == 0) n /= i;
   47|       |
   48|     10|        result -= result / i;
   49|     10|    }
   50|      7|    if (n > 1)
   51|      6|        result -= result / n;
   52|       |
   53|      7|    return result;
   54|      7|}
   55|       |}  // namespace math
   56|       |
   57|       |/**
   58|       | * @brief Self-test implementations
   59|       | * @returns void
   60|       | */
   61|      1|static void test() {
   62|      1|    assert(math::phiFunction(1) == 1);
   63|      0|    assert(math::phiFunction(2) == 1);
   64|      0|    assert(math::phiFunction(10) == 4);
   65|      0|    assert(math::phiFunction(123456) == 41088);
   66|      0|    assert(math::phiFunction(808017424794) == 263582333856);
   67|      0|    assert(math::phiFunction(3141592) == 1570792);
   68|      0|    assert(math::phiFunction(27182818) == 12545904);
   69|       |
   70|      0|    std::cout << "All tests have successfully passed!\n";
   71|      1|}
   72|       |
   73|       |/**
   74|       | * @brief Main function
   75|       | * @param argc commandline argument count (ignored)
   76|       | * @param argv commandline array of arguments (ignored)
   77|       | * @returns 0 on exit
   78|       | */
   79|      1|int main(int argc, char *argv[]) {
   80|      1|    test();
   81|      1|    return 0;
   82|      1|}

