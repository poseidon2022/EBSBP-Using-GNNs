    1|       |/**
    2|       | * @file
    3|       | * @brief
    4|       | * A simple program to check if the given number is
    5|       | * [Prime](https://en.wikipedia.org/wiki/Primality_test) or not.
    6|       | * @details
    7|       | * A prime number is any number that can be divided only by itself and 1. It
    8|       | * must be positive and a whole number, therefore any prime number is part of
    9|       | * the set of natural numbers. The majority of prime numbers are even numbers,
   10|       | * with the exception of 2. This algorithm finds prime numbers using this
   11|       | * information. additional ways to solve the prime check problem:
   12|       | * https://cp-algorithms.com/algebra/primality_tests.html#practice-problems
   13|       | * @author [Omkar Langhe](https://github.com/omkarlanghe)
   14|       | * @author [ewd00010](https://github.com/ewd00010)
   15|       | */
   16|       |
   17|       |#include <cassert>   /// for assert
   18|       |#include <iostream>  /// for IO operations
   19|       |
   20|       |/**
   21|       | * @brief Mathematical algorithms
   22|       | * @namespace
   23|       | */
   24|       |namespace math {
   25|       |/**
   26|       | * @brief Function to check if the given number is prime or not.
   27|       | * @param num number to be checked.
   28|       | * @return true if number is a prime
   29|       | * @return false if number is not a prime.
   30|       | */
   31|     10|bool is_prime(int64_t num) {
   32|       |    /*!
   33|       |     * Reduce all possibilities of a number which cannot be prime with the first
   34|       |     * 3 if, else if conditionals. Example: Since no even number, except 2 can
   35|       |     * be a prime number and the next prime we find after our checks is 5,
   36|       |     * we will start the for loop with i = 5. then for each loop we increment
   37|       |     * i by +6 and check if i or i+2 is a factor of the number; if it's a factor
   38|       |     * then we will return false. otherwise, true will be returned after the
   39|       |     * loop terminates at the terminating condition which is i*i <= num
   40|       |     */
   41|     10|    if (num <= 1) {
   42|      3|        return false;
   43|      7|    } else if (num == 2 || num == 3) {
   44|      2|        return true;
   45|      5|    } else if (num % 2 == 0 || num % 3 == 0) {
   46|      2|        return false;
   47|      3|    } else {
   48|     59|        for (int64_t i = 5; i * i <= num; i = i + 6) {
   49|     56|            if (num % i == 0 || num % (i + 2) == 0) {
   50|      0|                return false;
   51|      0|            }
   52|     56|        }
   53|      3|    }
   54|      3|    return true;
   55|     10|}
   56|       |}  // namespace math
   57|       |
   58|       |/**
   59|       | * @brief Self-test implementations
   60|       | * @returns void
   61|       | */
   62|      1|static void tests() {
   63|      1|    assert(math::is_prime(1) == false);
   64|      0|    assert(math::is_prime(2) == true);
   65|      0|    assert(math::is_prime(3) == true);
   66|      0|    assert(math::is_prime(4) == false);
   67|      0|    assert(math::is_prime(-4) == false);
   68|      0|    assert(math::is_prime(7) == true);
   69|      0|    assert(math::is_prime(-7) == false);
   70|      0|    assert(math::is_prime(19) == true);
   71|      0|    assert(math::is_prime(50) == false);
   72|      0|    assert(math::is_prime(115249) == true);
   73|       |
   74|      0|    std::cout << "All tests have successfully passed!" << std::endl;
   75|      1|}
   76|       |
   77|       |/**
   78|       | * @brief Main function
   79|       | * @returns 0 on exit
   80|       | */
   81|      1|int main() {
   82|      1|    tests();  // perform self-tests implementations
   83|      1|    return 0;
   84|      1|}

