    1|       |/**
    2|       | * @file
    3|       | * @brief Compute [double
    4|       | * factorial](https://en.wikipedia.org/wiki/Double_factorial): \f$n!!\f$
    5|       | *
    6|       | * Double factorial of a non-negative integer `n`, is defined as the product of
    7|       | * all the integers from 1 to n that have the same parity (odd or even) as n.
    8|       | * <br/>It is also called as semifactorial of a number and is denoted by
    9|       | * \f$n!!\f$
   10|       | */
   11|       |
   12|       |#include <cassert>
   13|       |#include <cstdint>
   14|       |#include <iostream>
   15|       |
   16|       |/** Compute double factorial using iterative method
   17|       | */
   18|      3|uint64_t double_factorial_iterative(uint64_t n) {
   19|      3|    uint64_t res = 1;
   20|     12|    for (uint64_t i = n;; i -= 2) {
   21|     12|        if (i == 0 || i == 1)
   22|      3|            return res;
   23|      9|        res *= i;
   24|      9|    }
   25|      0|    return res;
   26|      3|}
   27|       |
   28|       |/** Compute double factorial using resursive method.
   29|       | * <br/>Recursion can be costly for large numbers.
   30|       | */
   31|     12|uint64_t double_factorial_recursive(uint64_t n) {
   32|     12|    if (n <= 1)
   33|      3|        return 1;
   34|      9|    return n * double_factorial_recursive(n - 2);
   35|     12|}
   36|       |
   37|       |/** Wrapper to run tests using both recursive and iterative implementations.
   38|       | * The checks are only valid in debug builds due to the use of `assert()`
   39|       | * statements.
   40|       | * \param [in] n number to check double factorial for
   41|       | * \param [in] expected expected result
   42|       | */
   43|      3|void test(uint64_t n, uint64_t expected) {
   44|      3|    assert(double_factorial_iterative(n) == expected);
   45|      0|    assert(double_factorial_recursive(n) == expected);
   46|      3|}
   47|       |
   48|       |/**
   49|       | * Test implementations
   50|       | */
   51|      1|void tests() {
   52|      1|    std::cout << "Test 1:\t n=5\t...";
   53|      1|    test(5, 15);
   54|      1|    std::cout << "passed\n";
   55|       |
   56|      1|    std::cout << "Test 2:\t n=15\t...";
   57|      1|    test(15, 2027025);
   58|      1|    std::cout << "passed\n";
   59|       |
   60|      1|    std::cout << "Test 3:\t n=0\t...";
   61|      1|    test(0, 1);
   62|      1|    std::cout << "passed\n";
   63|      1|}
   64|       |
   65|       |/**
   66|       | * Main function
   67|       | */
   68|      1|int main() {
   69|      1|    tests();
   70|      1|    return 0;
   71|      1|}

