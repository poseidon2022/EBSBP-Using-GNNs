    1|       |/**
    2|       | * \file
    3|       | * \brief Compute statistics for data entered in rreal-time
    4|       | *
    5|       | * This algorithm is really beneficial to compute statistics on data read in
    6|       | * realtime. For example, devices reading biometrics data. The algorithm is
    7|       | * simple enough to be easily implemented in an embedded system.
    8|       | * \author [Krishna Vedala](https://github.com/kvedala)
    9|       | */
   10|       |#include <cassert>
   11|       |#include <cmath>
   12|       |#include <iostream>
   13|       |
   14|       |/**
   15|       | * \namespace statistics
   16|       | * \brief Statistical algorithms
   17|       | */
   18|       |namespace statistics {
   19|       |
   20|       |/**
   21|       | * continuous mean and variance computance using
   22|       | * first value as an approximation for the mean.
   23|       | * If the first number is much far form the mean, the algorithm becomes very
   24|       | * inaccurate to compute variance and standard deviation.
   25|       | */
   26|       |template <typename T>
   27|       |class stats_computer1 {
   28|       | public:
   29|       |    /** Constructor
   30|       |     * \param[in] x new data sample
   31|       |     */
   32|      7|    void new_val(T x) {
   33|      7|        if (n == 0)
   34|      1|            K = x;
   35|      7|        n++;
   36|      7|        T tmp = x - K;
   37|      7|        Ex += tmp;
   38|      7|        Ex2 += static_cast<double>(tmp) * tmp;
   39|      7|    }
   40|       |
   41|       |    /** return sample mean computed till last sample */
   42|      2|    double mean() const { return K + Ex / n; }
   43|       |
   44|       |    /** return data variance computed till last sample */
   45|      2|    double variance() const { return (Ex2 - (Ex * Ex) / n) / (n - 1); }
   46|       |
   47|       |    /** return sample standard deviation computed till last sample */
   48|      1|    double std() const { return std::sqrt(this->variance()); }
   49|       |
   50|       |    /** short-hand operator to read new sample from input stream
   51|       |     * \n e.g.: `std::cin >> stats1;`
   52|       |     */
   53|       |    friend std::istream &operator>>(std::istream &input,
   54|       |                                    stats_computer1 &stat) {
   55|       |        T val;
   56|       |        input >> val;
   57|       |        stat.new_val(val);
   58|       |        return input;
   59|       |    }
   60|       |
   61|       | private:
   62|       |    unsigned int n = 0;
   63|       |    double Ex, Ex2;
   64|       |    T K;
   65|       |};
   66|       |
   67|       |/**
   68|       | * continuous mean and variance computance using
   69|       | * Welford's algorithm  (very accurate)
   70|       | */
   71|       |template <typename T>
   72|       |class stats_computer2 {
   73|       | public:
   74|       |    /** Constructor
   75|       |     * \param[in] x new data sample
   76|       |     */
   77|      7|    void new_val(T x) {
   78|      7|        n++;
   79|      7|        double delta = x - mu;
   80|      7|        mu += delta / n;
   81|      7|        double delta2 = x - mu;
   82|      7|        M += delta * delta2;
   83|      7|    }
   84|       |
   85|       |    /** return sample mean computed till last sample */
   86|      2|    double mean() const { return mu; }
   87|       |
   88|       |    /** return data variance computed till last sample */
   89|      3|    double variance() const { return M / n; }
   90|       |
   91|       |    /** return sample standard deviation computed till last sample */
   92|      1|    double std() const { return std::sqrt(this->variance()); }
   93|       |
   94|       |    /** short-hand operator to read new sample from input stream
   95|       |     * \n e.g.: `std::cin >> stats1;`
   96|       |     */
   97|       |    friend std::istream &operator>>(std::istream &input,
   98|       |                                    stats_computer2 &stat) {
   99|       |        T val;
  100|       |        input >> val;
  101|       |        stat.new_val(val);
  102|       |        return input;
  103|       |    }
  104|       |
  105|       | private:
  106|       |    unsigned int n = 0;
  107|       |    double mu = 0, var = 0, M = 0;
  108|       |};
  109|       |
  110|       |}  // namespace statistics
  111|       |
  112|       |using statistics::stats_computer1;
  113|       |using statistics::stats_computer2;
  114|       |
  115|       |/** Test the algorithm implementation
  116|       | * \param[in] test_data array of data to test the algorithms
  117|       | */
  118|      1|void test_function(const float *test_data, const int number_of_samples) {
  119|      1|    float mean = 0.f, variance = 0.f;
  120|       |
  121|      1|    stats_computer1<float> stats01;
  122|      1|    stats_computer2<float> stats02;
  123|       |
  124|      8|    for (int i = 0; i < number_of_samples; i++) {
  125|      7|        stats01.new_val(test_data[i]);
  126|      7|        stats02.new_val(test_data[i]);
  127|      7|        mean += test_data[i];
  128|      7|    }
  129|       |
  130|      1|    mean /= number_of_samples;
  131|       |
  132|      8|    for (int i = 0; i < number_of_samples; i++) {
  133|      7|        float temp = test_data[i] - mean;
  134|      7|        variance += temp * temp;
  135|      7|    }
  136|      1|    variance /= number_of_samples;
  137|       |
  138|      1|    std::cout << "<<<<<<<< Test Function >>>>>>>>" << std::endl
  139|      1|              << "Expected: Mean: " << mean << "\t Variance: " << variance
  140|      1|              << std::endl;
  141|      1|    std::cout << "\tMethod 1:"
  142|      1|              << "\tMean: " << stats01.mean()
  143|      1|              << "\t Variance: " << stats01.variance()
  144|      1|              << "\t Std: " << stats01.std() << std::endl;
  145|      1|    std::cout << "\tMethod 2:"
  146|      1|              << "\tMean: " << stats02.mean()
  147|      1|              << "\t Variance: " << stats02.variance()
  148|      1|              << "\t Std: " << stats02.std() << std::endl;
  149|       |
  150|      1|    assert(std::abs(stats01.mean() - mean) < 0.01);
  151|      0|    assert(std::abs(stats02.mean() - mean) < 0.01);
  152|      0|    assert(std::abs(stats02.variance() - variance) < 0.01);
  153|       |
  154|      0|    std::cout << "(Tests passed)" << std::endl;
  155|      1|}
  156|       |
  157|       |/** Main function */
  158|      1|int main(int argc, char **argv) {
  159|      1|    const float test_data1[] = {3, 4, 5, -1.4, -3.6, 1.9, 1.};
  160|      1|    test_function(test_data1, sizeof(test_data1) / sizeof(test_data1[0]));
  161|       |
  162|      1|    std::cout
  163|      1|        << "Enter data. Any non-numeric data will terminate the data input."
  164|      1|        << std::endl;
  165|       |
  166|      1|    stats_computer1<float> stats1;
  167|      1|    stats_computer2<float> stats2;
  168|       |
  169|      1|    while (1) {
  170|      1|        double val;
  171|      1|        std::cout << "Enter number: ";
  172|      1|        std::cin >> val;
  173|       |
  174|       |        // check for failure to read input. Happens for
  175|       |        // non-numeric data
  176|      1|        if (std::cin.fail())
  177|      1|            break;
  178|       |
  179|      0|        stats1.new_val(val);
  180|      0|        stats2.new_val(val);
  181|       |
  182|      0|        std::cout << "\tMethod 1:"
  183|      0|                  << "\tMean: " << stats1.mean()
  184|      0|                  << "\t Variance: " << stats1.variance()
  185|      0|                  << "\t Std: " << stats1.std() << std::endl;
  186|      0|        std::cout << "\tMethod 2:"
  187|      0|                  << "\tMean: " << stats2.mean()
  188|      0|                  << "\t Variance: " << stats2.variance()
  189|      0|                  << "\t Std: " << stats2.std() << std::endl;
  190|      0|    }
  191|       |
  192|      1|    return 0;
  193|      1|}

