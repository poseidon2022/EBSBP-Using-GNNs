    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation for the [Array Left
    4|       | * Rotation](https://www.javatpoint.com/program-to-left-rotate-the-elements-of-an-array)
    5|       | * algorithm.
    6|       | * @details Shifting an array to the left involves moving each element of the
    7|       | * array so that it occupies a position of a certain shift value before its
    8|       | * current one. This implementation uses a result vector and does not mutate the
    9|       | * input.
   10|       | * @author [Alvin](https://github.com/polarvoid)
   11|       | */
   12|       |
   13|       |#include <cassert>   /// for assert
   14|       |#include <iostream>  /// for IO operations
   15|       |#include <vector>    /// for std::vector
   16|       |
   17|       |/**
   18|       | * @namespace operations_on_datastructures
   19|       | * @brief Operations on Data Structures
   20|       | */
   21|       |namespace operations_on_datastructures {
   22|       |
   23|       |/**
   24|       | * @brief Prints the values of a vector sequentially, ending with a newline
   25|       | * character.
   26|       | * @param array Reference to the array to be printed
   27|       | * @returns void
   28|       | */
   29|      6|void print(const std::vector<int32_t> &array) {
   30|    430|    for (int32_t i : array) {
   31|    430|        std::cout << i << " ";  /// Print each value in the array
   32|    430|    }
   33|      6|    std::cout << "\n";  /// Print newline
   34|      6|}
   35|       |
   36|       |/**
   37|       | * @brief Shifts the given vector to the left by the shift amount and returns a
   38|       | * new vector with the result. The original vector is not mutated.
   39|       | * @details Shifts the values of the vector, by creating a new vector and adding
   40|       | * values from the shift index to the end, then appending the rest of the
   41|       | * elements from the start of the vector.
   42|       | * @param array A reference to the input std::vector
   43|       | * @param shift The amount to be shifted to the left
   44|       | * @returns A std::vector with the shifted values
   45|       | */
   46|       |std::vector<int32_t> shift_left(const std::vector<int32_t> &array,
   47|      5|                                size_t shift) {
   48|      5|    if (array.size() <= shift) {
   49|      2|        return {};  ///< We got an invalid shift, return empty array
   50|      2|    }
   51|      3|    std::vector<int32_t> res(array.size());  ///< Result array
   52|    220|    for (size_t i = shift; i < array.size(); i++) {
   53|    217|        res[i - shift] = array[i];  ///< Add values after the shift index
   54|    217|    }
   55|      6|    for (size_t i = 0; i < shift; i++) {
   56|      3|        res[array.size() - shift + i] =
   57|      3|            array[i];  ///< Add the values from the start
   58|      3|    }
   59|      3|    return res;
   60|      5|}
   61|       |
   62|       |}  // namespace operations_on_datastructures
   63|       |
   64|       |/**
   65|       | * @namespace tests
   66|       | * @brief Testcases to check Union of Two Arrays.
   67|       | */
   68|       |namespace tests {
   69|       |using operations_on_datastructures::print;
   70|       |using operations_on_datastructures::shift_left;
   71|       |/**
   72|       | * @brief A Test to check an simple case
   73|       | * @returns void
   74|       | */
   75|      1|void test1() {
   76|      1|    std::cout << "TEST CASE 1\n";
   77|      1|    std::cout << "Initialized arr = {1, 2, 3, 4, 5}\n";
   78|      1|    std::cout << "Expected result: {3, 4, 5, 1, 2}\n";
   79|      1|    std::vector<int32_t> arr = {1, 2, 3, 4, 5};
   80|      1|    std::vector<int32_t> res = shift_left(arr, 2);
   81|      1|    std::vector<int32_t> expected = {3, 4, 5, 1, 2};
   82|      1|    assert(res == expected);
   83|      0|    print(res);  ///< Should print 3 4 5 1 2
   84|      1|    std::cout << "TEST PASSED!\n\n";
   85|      1|}
   86|       |/**
   87|       | * @brief A Test to check an empty vector
   88|       | * @returns void
   89|       | */
   90|      1|void test2() {
   91|      1|    std::cout << "TEST CASE 2\n";
   92|      1|    std::cout << "Initialized arr = {}\n";
   93|      1|    std::cout << "Expected result: {}\n";
   94|      1|    std::vector<int32_t> arr = {};
   95|      1|    std::vector<int32_t> res = shift_left(arr, 2);
   96|      1|    std::vector<int32_t> expected = {};
   97|      1|    assert(res == expected);
   98|      0|    print(res);  ///< Should print empty newline
   99|      1|    std::cout << "TEST PASSED!\n\n";
  100|      1|}
  101|       |/**
  102|       | * @brief A Test to check an invalid shift value
  103|       | * @returns void
  104|       | */
  105|      1|void test3() {
  106|      1|    std::cout << "TEST CASE 3\n";
  107|      1|    std::cout << "Initialized arr = {1, 2, 3, 4, 5}\n";
  108|      1|    std::cout << "Expected result: {}\n";
  109|      1|    std::vector<int32_t> arr = {1, 2, 3, 4, 5};
  110|      1|    std::vector<int32_t> res = shift_left(arr, 7);  ///< 7 > 5
  111|      1|    std::vector<int32_t> expected = {};
  112|      1|    assert(res == expected);
  113|      0|    print(res);  ///< Should print empty newline
  114|      1|    std::cout << "TEST PASSED!\n\n";
  115|      1|}
  116|       |/**
  117|       | * @brief A Test to check a very large input
  118|       | * @returns void
  119|       | */
  120|      1|void test4() {
  121|      1|    std::cout << "TEST CASE 4\n";
  122|      1|    std::cout << "Initialized arr = {2, 4, ..., 420}\n";
  123|      1|    std::cout << "Expected result: {4, 6, ..., 420, 2}\n";
  124|      1|    std::vector<int32_t> arr;
  125|    211|    for (int i = 1; i <= 210; i++) {
  126|    210|        arr.push_back(i * 2);
  127|    210|    }
  128|      1|    print(arr);
  129|      1|    std::vector<int32_t> res = shift_left(arr, 1);
  130|      1|    std::vector<int32_t> expected;
  131|    210|    for (int i = 1; i < 210; i++) {
  132|    209|        expected.push_back(arr[i]);
  133|    209|    }
  134|      1|    expected.push_back(2);
  135|      1|    assert(res == expected);
  136|      0|    print(res);  ///< Should print {4, 6, ..., 420, 2}
  137|      1|    std::cout << "TEST PASSED!\n\n";
  138|      1|}
  139|       |/**
  140|       | * @brief A Test to check a shift of zero
  141|       | * @returns void
  142|       | */
  143|      1|void test5() {
  144|      1|    std::cout << "TEST CASE 5\n";
  145|      1|    std::cout << "Initialized arr = {1, 2, 3, 4, 5}\n";
  146|      1|    std::cout << "Expected result: {1, 2, 3, 4, 5}\n";
  147|      1|    std::vector<int32_t> arr = {1, 2, 3, 4, 5};
  148|      1|    std::vector<int32_t> res = shift_left(arr, 0);
  149|      1|    assert(res == arr);
  150|      0|    print(res);  ///< Should print 1 2 3 4 5
  151|      1|    std::cout << "TEST PASSED!\n\n";
  152|      1|}
  153|       |}  // namespace tests
  154|       |
  155|       |/**
  156|       | * @brief Function to test the correctness of shift_left() function
  157|       | * @returns void
  158|       | */
  159|      1|static void test() {
  160|      1|    tests::test1();
  161|      1|    tests::test2();
  162|      1|    tests::test3();
  163|      1|    tests::test4();
  164|      1|    tests::test5();
  165|      1|}
  166|       |
  167|       |/**
  168|       | * @brief main function
  169|       | * @returns 0 on exit
  170|       | */
  171|      1|int main() {
  172|      1|    test();  // run self-test implementations
  173|      1|    return 0;
  174|      1|}

