    1|       |#include <iostream>
    2|       |
    3|       |class Node {
    4|       | public:
    5|       |    int val;
    6|       |    Node *next;
    7|       |
    8|     11|    Node(int v, Node *n) : val(v), next(n) {}  // Default constructor for Node
    9|       |};
   10|       |
   11|     14|int getSize(Node *root) {
   12|     14|    if (root == NULL) {
   13|      3|        return 0;
   14|      3|    }
   15|       |    // Each node will return 1 so the total adds up to be the size
   16|     11|    return 1 + getSize(root->next);
   17|     14|}
   18|       |
   19|       |/*
   20|       | * @brief This function dealocates memory related to the given list
   21|       | * It recursively deletes all of the nodes of the input list.
   22|       | * @param room the root/head of the input list
   23|       | * @warning Plese note that the memory for each node has to be alocated using new.
   24|       | */
   25|     13|void deleteList(Node *const root) {
   26|     13|    if (root != NULL)
   27|     11|    {
   28|     11|        deleteList(root->next);
   29|     11|        delete root;
   30|     11|    }
   31|     13|}
   32|       |
   33|      1|int main() {
   34|      1|    Node *myList = new Node(0, NULL);  // Initializes the LinkedList
   35|      1|    Node *temp = myList;
   36|       |    // Creates a linked lists of total size 10, numbered 1 - 10
   37|     10|    for (int i = 1; i < 10; i++) {
   38|      9|        temp->next = new Node(i, NULL);
   39|      9|        temp = temp->next;
   40|      9|    }
   41|       |    // Creating other lists for checking purposes
   42|      1|    Node *secondList = new Node(0, NULL);  // List of size 1
   43|      1|    Node *thirdList = NULL;                // List of size 0
   44|       |
   45|      1|    std::cout << getSize(myList) << std::endl
   46|      1|              << getSize(secondList) << std::endl
   47|      1|              << getSize(thirdList) << std::endl;
   48|      1|    deleteList(secondList);
   49|      1|    deleteList(myList);
   50|       |
   51|      1|    return 0;
   52|      1|}

