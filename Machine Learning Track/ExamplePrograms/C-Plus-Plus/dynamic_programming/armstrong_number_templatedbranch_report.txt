    1|       |/**
    2|       | * @file
    3|       | * @brief Checks whether a number is an [Armstrong
    4|       | * Number](https://en.wikipedia.org/wiki/Narcissistic_number) or not.
    5|       | *
    6|       | * @details
    7|       | * An Armstrong number is a number that is the sum of its own digits each raised
    8|       | * to the power of the number of digits. For example: 153 is an Armstrong number
    9|       | * since 153 = 1^3 + 5^3 + 3^3.
   10|       | *
   11|       | * A few examples of valid armstrong numbers:
   12|       | * 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208, 9474, 54748,
   13|       | * 92727, 93084.
   14|       | *
   15|       | * Armstrong numbers are also known as Narcissistic Numbers, as stated in
   16|       | * Wikipedia.
   17|       | *
   18|       | * @author [Shivam Singhal](https://github.com/shivhek25)
   19|       | * @author [David Leal](https://github.com/Panquesito7)
   20|       | */
   21|       |
   22|       |#include <cassert>   /// for assert
   23|       |#include <cmath>     /// for std::pow
   24|       |#include <iostream>  /// for IO operations
   25|       |
   26|       |/**
   27|       | * @namespace
   28|       | * @brief Dynamic Programming algorithms
   29|       | */
   30|       |namespace dynamic_programming {
   31|       |
   32|       |/**
   33|       | * @brief Checks if the given number is armstrong or not.
   34|       | * @param number the number to check
   35|       | * @returns false if the given number is NOT armstrong
   36|       | * @returns true if the given number IS armstrong
   37|       | */
   38|       |template <typename T>
   39|     10|bool is_armstrong(const T &number) {
   40|     10|    int count = 0, temp = number, result = 0, rem = 0;
   41|       |
   42|       |    // Count the number of digits of the given number.
   43|       |    // For example: 153 would be 3 digits.
   44|     36|    while (temp != 0) {
   45|     26|        temp /= 10;
   46|     26|        count++;
   47|     26|    }
   48|       |
   49|       |    // Calculation for checking of armstrongs number i.e.
   50|       |    // in an n-digit number sum of the digits is raised to a power of `n` is
   51|       |    // equal to the original number.
   52|     10|    temp = number;
   53|     36|    while (temp != 0) {
   54|     26|        rem = temp % 10;
   55|     26|        result += static_cast<T>(std::pow(rem, count));
   56|     26|        temp /= 10;
   57|     26|    }
   58|       |
   59|     10|    if (result == number) {
   60|      5|        return true;
   61|      5|    } else {
   62|      5|        return false;
   63|      5|    }
   64|     10|}
   65|       |}  // namespace dynamic_programming
   66|       |
   67|       |/**
   68|       | * @brief Self-test implementations
   69|       | * @returns void
   70|       | */
   71|      1|static void tests() {
   72|      1|    assert(dynamic_programming::is_armstrong(153) == true);
   73|      0|    assert(dynamic_programming::is_armstrong(1) == true);
   74|      0|    assert(dynamic_programming::is_armstrong(0) == true);
   75|      0|    assert(dynamic_programming::is_armstrong(370) == true);
   76|      0|    assert(dynamic_programming::is_armstrong(1634) == true);
   77|      0|    assert(dynamic_programming::is_armstrong(580) == false);
   78|      0|    assert(dynamic_programming::is_armstrong(15) == false);
   79|      0|    assert(dynamic_programming::is_armstrong(1024) == false);
   80|      0|    assert(dynamic_programming::is_armstrong(989) == false);
   81|      0|    assert(dynamic_programming::is_armstrong(103) == false);
   82|       |
   83|      0|    std::cout << "All tests have successfully passed!\n";
   84|      1|}
   85|       |
   86|       |/**
   87|       | * @brief Main function
   88|       | * @returns 0 on exit
   89|       | */
   90|      1|int main() {
   91|      1|    tests();  // run self-test implementations
   92|      1|    return 0;
   93|      1|}

