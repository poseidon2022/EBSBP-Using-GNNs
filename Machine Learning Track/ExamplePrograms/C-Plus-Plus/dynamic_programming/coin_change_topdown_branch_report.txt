    1|       |/**
    2|       | * @file
    3|       | * @brief [Minimum coins](https://leetcode.com/problems/coin-change/) change
    4|       | * problem is a problem used to find the minimum number of coins required to
    5|       | * completely reach a target amount.
    6|       | *
    7|       | * @details
    8|       | * This problem can be solved using 2 methods:
    9|       | * 1. Top down approach
   10|       | * 2. Bottom up appraoch
   11|       | * Top down approach involves a vector with all elements initialised to 0.
   12|       | * It is based on optimal substructure and overlapping subproblems.
   13|       | * Overall time complexity of coin change problem is O(n*t)
   14|       | * For example: example 1:-
   15|       | * Coins: {1,7,10}
   16|       | * Target:15
   17|       | * Therfore minimum number of coins required = 3 of denomination 1,7 and 7.
   18|       | * @author [Divyansh Kushwaha](https://github.com/webdesignbydivyansh)
   19|       | */
   20|       |
   21|       |#include <cassert>   // for assert
   22|       |#include <climits>   // for INT_MAX
   23|       |#include <iostream>  // for io operations
   24|       |#include <vector>    // for std::vector
   25|       |
   26|       |/**
   27|       | * @namespace dynamic_programming
   28|       | * @brief Dynamic Programming algorithm
   29|       | */
   30|       |namespace dynamic_programming {
   31|       |/**
   32|       | * @namespace mincoins_topdown
   33|       | * @brief Functions for [minimum coin
   34|       | * exchange](https://leetcode.com/problems/coin-change/) problem
   35|       | */
   36|       |namespace mincoins_topdown {
   37|       |/**
   38|       | * @brief This implementation is for finding minimum number of coins .
   39|       | * @param T template-type to use any kind of value
   40|       | * @param n amount to be reached
   41|       | * @param coins vector of coins
   42|       | * @param t deontes the number of coins
   43|       | * @param dp initilised to 0
   44|       | * @returns minimum number of coins
   45|       | */
   46|       |template <typename T>
   47|       |int64_t mincoins(const T &n, const std::vector<T> &coins, const int16_t &t,
   48|     86|                 std::vector<T> dp) {
   49|     86|    if (n == 0) {
   50|     19|        return 0;
   51|     19|    }
   52|     67|    if (dp[n] != 0) {
   53|      0|        return dp[n];
   54|      0|    }
   55|     67|    int ans = INT_MAX;  // variable to store min coins
   56|    268|    for (int i = 0; i < t; i++) {
   57|    201|        if (n - coins[i] >= 0) {  // if after subtracting the current
   58|       |                                  // denomination is it greater than 0 or not
   59|     85|            int sub = mincoins(n - coins[i], coins, t, dp);
   60|     85|            ans = std::min(ans, sub + 1);
   61|     85|        }
   62|    201|    }
   63|     67|    dp[n] = ans;
   64|     67|    return dp[n];  // returns minimum number of coins
   65|     67|}
   66|       |
   67|       |}  // namespace mincoins_topdown
   68|       |}  // namespace dynamic_programming
   69|       |
   70|       |/**
   71|       | * @brief Test implementations
   72|       | * @returns void
   73|       | */
   74|      1|static void test() {
   75|       |    // example 1: number of coins=3 and minimum coins required=3(7,7,1)
   76|      1|    const int64_t n1 = 15;
   77|      1|    const int8_t t1 = 3, a1 = 0;
   78|      1|    std::cout << "\nTest 1...";
   79|      1|    std::vector<int64_t> arr1{1, 7, 10};
   80|      1|    std::vector<int64_t> dp1(n1 + 1);
   81|      1|    fill(dp1.begin(), dp1.end(), a1);
   82|      1|    assert(dynamic_programming::mincoins_topdown::mincoins(n1, arr1, t1, dp1) ==
   83|      1|           3);
   84|      0|    std::cout << "Passed\n";
   85|      1|}
   86|       |
   87|       |/**
   88|       | * @brief Main function
   89|       | * @returns 0 on exit
   90|       | */
   91|      1|int main() {
   92|      1|    test();  // execute the test
   93|      1|    return 0;
   94|      1|}

