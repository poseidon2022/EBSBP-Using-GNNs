    1|       |/**
    2|       | * @file
    3|       | * @brief Implementation of [Saddleback
    4|       | * Algorithm](https://www.geeksforgeeks.org/saddleback-search-algorithm-in-a-2d-array)
    5|       | * for 2D arrays.
    6|       | *
    7|       | * @details
    8|       | * Saddleback Algorithm is an algorithm that searches 2D array in linear time,
    9|       | * i.e, O(m + n), where m is number of rows and n is number of columns of 2D
   10|       | * array. Also, each row and column of the matrix should be sorted beforehand
   11|       | * for this algorithm to work.
   12|       | *
   13|       | * @author [Hashir Niazi](https://github.com/HashirGJ8842)
   14|       | */
   15|       |#include <cassert>   /// for assert
   16|       |#include <cstdint>
   17|       |#include <iostream>  /// for io operations, and std::pair
   18|       |#include <vector>    /// for std::vector
   19|       |
   20|       |/** \namespace search
   21|       | * \brief Algorithms for searching
   22|       | */
   23|       |namespace search {
   24|       |/** \namespace saddleback
   25|       | * \brief Function for implementing [Saddleback
   26|       | * Algorithm](https://www.geeksforgeeks.org/saddleback-search-algorithm-in-a-2d-array).
   27|       | */
   28|       |namespace saddleback {
   29|       |/**
   30|       | * This function implements [Saddleback
   31|       | * Algorithm](https://www.geeksforgeeks.org/saddleback-search-algorithm-in-a-2d-array),
   32|       | * on a sorted 2D array, and finds the location of the element needed to search
   33|       | * @param matrix 2D matrix which is sorted on the basis of rows and columns
   34|       | * @param element element to be searched
   35|       | * @return An std::pair of with row and column populated within it, if the
   36|       | * element is present.
   37|       | * @return An std::pair with (0, 0), if the element is not present.
   38|       | */
   39|       |std::pair<uint32_t, uint32_t> saddleback(
   40|      5|    std::vector<std::vector<int32_t>> matrix, int32_t element) {
   41|      5|    uint32_t left_index = 0;
   42|      5|    uint32_t right_index = matrix[0].size() - 1;  // Start from top right corner
   43|     29|    while (left_index <
   44|     29|           matrix.size()) {  // Exit once the value of indexes get out of range.
   45|     28|        if (element ==
   46|     28|            matrix[left_index]
   47|     28|                  [right_index]) {  // If value on this position of matrix is
   48|       |                                    // equal to element, return (row, column).
   49|      3|            return std::make_pair(left_index + 1, right_index + 1);
   50|     25|        } else if (element >
   51|     25|                   matrix[left_index]
   52|     25|                         [right_index]) {  // Else if value on this position of
   53|       |                                           // matrix is less than the element,
   54|       |                                           // move left.
   55|     11|            ++left_index;
   56|     14|        } else if (element <
   57|     14|                   matrix[left_index]
   58|     14|                         [right_index]) {  // Else if value on this position of
   59|       |                                           // matrix is greater than the
   60|       |                                           // element, move down.
   61|     14|            if (!right_index)
   62|      1|                break;
   63|     13|            else
   64|     13|                --right_index;
   65|     14|        }
   66|     28|    }
   67|      2|    return std::make_pair(
   68|      2|        0, 0);  // If the program reaches here, that means one of the index
   69|       |                // went out of index, hence no element present.
   70|      5|}
   71|       |}  // namespace saddleback
   72|       |}  // namespace search
   73|       |
   74|       |/**
   75|       | * @brief Test implementations
   76|       | * @returns void
   77|       | */
   78|      1|static void test() {
   79|      1|    std::vector<std::vector<int32_t>> matrix = {{1, 10, 100, 1000, 10000},
   80|      1|                                                {2, 20, 200, 2000, 20000},
   81|      1|                                                {3, 30, 300, 3000, 30000},
   82|      1|                                                {4, 40, 400, 4000, 40000},
   83|      1|                                                {5, 50, 500, 5000, 50000}};
   84|       |
   85|      1|    std::pair<uint32_t, uint32_t> not_found = std::make_pair(0, 0);
   86|      1|    std::pair<uint32_t, uint32_t> test_answer;
   87|       |    // Test 1
   88|      1|    std::pair<uint32_t, uint32_t> answer1 =
   89|      1|        search::saddleback::saddleback(matrix, 123);
   90|      1|    assert(not_found == answer1);
   91|       |    // Test 2
   92|      0|    answer1 = search::saddleback::saddleback(matrix, 0);
   93|      1|    assert(not_found == answer1);
   94|       |    // Test 3
   95|      0|    answer1 = search::saddleback::saddleback(matrix, 1);
   96|      1|    test_answer = std::make_pair(1, 1);
   97|      1|    assert(test_answer == answer1);
   98|       |    // Test 4
   99|      0|    answer1 = search::saddleback::saddleback(matrix, 50000);
  100|      1|    test_answer = std::make_pair(5, 5);
  101|      1|    assert(test_answer == answer1);
  102|       |    // Test 5
  103|      0|    answer1 = search::saddleback::saddleback(matrix, 300);
  104|      1|    test_answer = std::make_pair(3, 3);
  105|      1|    assert(test_answer == answer1);
  106|      1|}
  107|       |
  108|       |/**
  109|       | * @brief Main function
  110|       | * @returns 0 on exit
  111|       | */
  112|      1|int main() {
  113|      1|    test();  // execute the tests
  114|      1|    return 0;
  115|      1|}

