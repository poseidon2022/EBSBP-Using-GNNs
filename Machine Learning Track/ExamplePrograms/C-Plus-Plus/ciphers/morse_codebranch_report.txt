    1|       |/**
    2|       | * @file
    3|       | * @author [Deep Raval](https://github.com/imdeep2905)
    4|       | *
    5|       | * @brief Implementation of [Morse Code]
    6|       | * (https://en.wikipedia.org/wiki/Morse_code).
    7|       | *
    8|       | * @details
    9|       | * Morse code is a method used in telecommunication to encode text characters
   10|       | * as standardized sequences of two different signal durations, called dots
   11|       | * and dashes or dits and dahs. Morse code is named after Samuel Morse, an
   12|       | * inventor of the telegraph.
   13|       | */
   14|       |#include <cassert>
   15|       |#include <iostream>
   16|       |#include <string>
   17|       |#include <vector>
   18|       |
   19|       |/** \namespace ciphers
   20|       | * \brief Algorithms for encryption and decryption
   21|       | */
   22|       |namespace ciphers {
   23|       |/** \namespace morse
   24|       | * \brief Functions for [Morse Code]
   25|       | * (https://en.wikipedia.org/wiki/Morse_code).
   26|       | */
   27|       |namespace morse {
   28|       |/**
   29|       | * Get the morse representation for given character.
   30|       | * @param c Character
   31|       | * @returns morse representation string of character
   32|       | */
   33|     37|std::string char_to_morse(const char &c) {
   34|       |    // return corresponding morse code
   35|     37|    switch (c) {
   36|      1|        case 'a':
   37|      1|            return ".-";
   38|      1|        case 'b':
   39|      1|            return "-...";
   40|      1|        case 'c':
   41|      1|            return "-.-.";
   42|      1|        case 'd':
   43|      1|            return "-..";
   44|      1|        case 'e':
   45|      1|            return ".";
   46|      1|        case 'f':
   47|      1|            return "..-.";
   48|      1|        case 'g':
   49|      1|            return "--.";
   50|      1|        case 'h':
   51|      1|            return "....";
   52|      1|        case 'i':
   53|      1|            return "..";
   54|      1|        case 'j':
   55|      1|            return ".---";
   56|      1|        case 'k':
   57|      1|            return "-.-";
   58|      1|        case 'l':
   59|      1|            return ".-..";
   60|      1|        case 'm':
   61|      1|            return "--";
   62|      1|        case 'n':
   63|      1|            return "-.";
   64|      1|        case 'o':
   65|      1|            return "---";
   66|      1|        case 'p':
   67|      1|            return ".--.";
   68|      1|        case 'q':
   69|      1|            return "--.-";
   70|      1|        case 'r':
   71|      1|            return ".-.";
   72|      1|        case 's':
   73|      1|            return "...";
   74|      1|        case 't':
   75|      1|            return "-";
   76|      1|        case 'u':
   77|      1|            return "..-";
   78|      1|        case 'v':
   79|      1|            return "...-";
   80|      1|        case 'w':
   81|      1|            return ".--";
   82|      1|        case 'x':
   83|      1|            return "-..-";
   84|      1|        case 'y':
   85|      1|            return "-.--";
   86|      1|        case 'z':
   87|      1|            return "--..";
   88|      1|        case '1':
   89|      1|            return ".----";
   90|      1|        case '2':
   91|      1|            return "..---";
   92|      1|        case '3':
   93|      1|            return "...--";
   94|      1|        case '4':
   95|      1|            return "....-";
   96|      1|        case '5':
   97|      1|            return ".....";
   98|      1|        case '6':
   99|      1|            return "-....";
  100|      1|        case '7':
  101|      1|            return "--...";
  102|      1|        case '8':
  103|      1|            return "---..";
  104|      1|        case '9':
  105|      1|            return "----.";
  106|      2|        case '0':
  107|      2|            return "-----";
  108|      0|        default:
  109|      0|            std::cerr << "Found invalid character: " << c << ' ' << std::endl;
  110|      0|            std::exit(0);
  111|     37|    }
  112|     37|}
  113|       |/**
  114|       | * Get character from the morse representation.
  115|       | * @param s Morse representation
  116|       | * @returns corresponding character
  117|       | */
  118|     37|char morse_to_char(const std::string &s) {
  119|       |    // return corresponding character
  120|     37|    if (s == ".-") {
  121|      1|        return 'a';
  122|     36|    } else if (s == "-...") {
  123|      1|        return 'b';
  124|     35|    } else if (s == "-.-.") {
  125|      1|        return 'c';
  126|     34|    } else if (s == "-..") {
  127|      1|        return 'd';
  128|     33|    } else if (s == ".") {
  129|      1|        return 'e';
  130|     32|    } else if (s == "..-.") {
  131|      1|        return 'f';
  132|     31|    } else if (s == "--.") {
  133|      1|        return 'g';
  134|     30|    } else if (s == "....") {
  135|      1|        return 'h';
  136|     29|    } else if (s == "..") {
  137|      1|        return 'i';
  138|     28|    } else if (s == ".---") {
  139|      1|        return 'j';
  140|     27|    } else if (s == "-.-") {
  141|      1|        return 'k';
  142|     26|    } else if (s == ".-..") {
  143|      1|        return 'l';
  144|     25|    } else if (s == "--") {
  145|      1|        return 'm';
  146|     24|    } else if (s == "-.") {
  147|      1|        return 'n';
  148|     23|    } else if (s == "---") {
  149|      1|        return 'o';
  150|     22|    } else if (s == ".--.") {
  151|      1|        return 'p';
  152|     21|    } else if (s == "--.-") {
  153|      1|        return 'q';
  154|     20|    } else if (s == ".-.") {
  155|      1|        return 'r';
  156|     19|    } else if (s == "...") {
  157|      1|        return 's';
  158|     18|    } else if (s == "-") {
  159|      1|        return 't';
  160|     17|    } else if (s == "..-") {
  161|      1|        return 'u';
  162|     16|    } else if (s == "...-") {
  163|      1|        return 'v';
  164|     15|    } else if (s == ".--") {
  165|      1|        return 'w';
  166|     14|    } else if (s == "-..-") {
  167|      1|        return 'x';
  168|     13|    } else if (s == "-.--") {
  169|      1|        return 'y';
  170|     12|    } else if (s == "--..") {
  171|      1|        return 'z';
  172|     11|    } else if (s == ".----") {
  173|      1|        return '1';
  174|     10|    } else if (s == "..---") {
  175|      1|        return '2';
  176|      9|    } else if (s == "...--") {
  177|      1|        return '3';
  178|      8|    } else if (s == "....-") {
  179|      1|        return '4';
  180|      7|    } else if (s == ".....") {
  181|      1|        return '5';
  182|      6|    } else if (s == "-....") {
  183|      1|        return '6';
  184|      5|    } else if (s == "--...") {
  185|      1|        return '7';
  186|      4|    } else if (s == "---..") {
  187|      1|        return '8';
  188|      3|    } else if (s == "----.") {
  189|      1|        return '9';
  190|      2|    } else if (s == "-----") {
  191|      2|        return '0';
  192|      2|    } else {
  193|      0|        std::cerr << "Found invalid Morse code: " << s << ' ' << std::endl;
  194|      0|        std::exit(0);
  195|      0|    }
  196|     37|}
  197|       |/**
  198|       | * Encrypt given text using morse code.
  199|       | * @param text text to be encrypted
  200|       | * @returns new encrypted text
  201|       | */
  202|      2|std::string encrypt(const std::string &text) {
  203|      2|    std::string encrypted_text = "";  // Empty string to store encrypted text
  204|       |    // Going through each character of text and converting it
  205|       |    // to morse representation
  206|     37|    for (const char &c : text) {
  207|     37|        encrypted_text += ciphers::morse::char_to_morse(c) + " ";
  208|     37|    }
  209|      2|    return encrypted_text;  // Returning encrypted text
  210|      2|}
  211|       |/**
  212|       | * Decrypt given morse coded text.
  213|       | * @param text text to be decrypted
  214|       | * @returns new decrypted text
  215|       | */
  216|      2|std::string decrypt(const std::string &text) {
  217|       |    // Going through each character of text and converting it
  218|       |    // back to normal representation.
  219|      2|    std::string decrypted_text = "";  // Empty string to store decrypted text
  220|       |    // Spliting string (with delimiter = " ") and storing it
  221|       |    // in vector
  222|      2|    std::size_t pos_start = 0, pos_end = 0, delim_len = 1;
  223|      2|    std::vector<std::string> splits;
  224|     39|    while ((pos_end = text.find(' ', pos_start)) != std::string::npos) {
  225|     37|        std::string token = text.substr(pos_start, pos_end - pos_start);
  226|     37|        pos_start = pos_end + delim_len;
  227|     37|        splits.push_back(token);
  228|     37|    }
  229|       |
  230|       |    // Traversing through each morse code string
  231|     37|    for (const std::string &s : splits) {
  232|       |        // Add corresponding character
  233|     37|        decrypted_text += ciphers::morse::morse_to_char(s);
  234|     37|    }
  235|       |
  236|      2|    return decrypted_text;  // Returning decrypted text
  237|      2|}
  238|       |}  // namespace morse
  239|       |}  // namespace ciphers
  240|       |
  241|       |/**
  242|       | * @brief Function to test above algorithm
  243|       | * @returns void
  244|       | */
  245|      1|static void test() {
  246|       |    // Test 1
  247|      1|    std::string text1 = "01234567890";
  248|      1|    std::string encrypted1 = ciphers::morse::encrypt(text1);
  249|      1|    std::string decrypted1 = ciphers::morse::decrypt(encrypted1);
  250|      1|    assert(text1 == decrypted1);
  251|      0|    std::cout << "Original text : " << text1 << std::endl;
  252|      1|    std::cout << "Encrypted text : " << encrypted1 << std::endl;
  253|      1|    std::cout << "Decrypted text : " << decrypted1 << std::endl;
  254|       |    // Test 2
  255|      1|    std::string text2 = "abcdefghijklmnopqrstuvwxyz";
  256|      1|    std::string encrypted2 = ciphers::morse::encrypt(text2);
  257|      1|    std::string decrypted2 = ciphers::morse::decrypt(encrypted2);
  258|      1|    assert(text2 == decrypted2);
  259|      0|    std::cout << "Original text : " << text2 << std::endl;
  260|      1|    std::cout << "Encrypted text : " << encrypted2 << std::endl;
  261|      1|    std::cout << "Decrypted text : " << decrypted2 << std::endl;
  262|      1|}
  263|       |
  264|       |/**
  265|       | * @brief Main function
  266|       | * @returns 0 on exit
  267|       | */
  268|      1|int main() {
  269|       |    // Testing
  270|      1|    test();
  271|      1|    return 0;
  272|      1|}

