    1|       |/**
    2|       | * @file
    3|       | * @brief [Atbash Cipher](https://en.wikipedia.org/wiki/Atbash) implementation
    4|       | * @details The Atbash cipher is a subsitution cipher where the letters of the
    5|       | * alphabet are in reverse. For example, A is replaced with Z, B is replaced
    6|       | * with Y, etc.
    7|       | *
    8|       | * ### Algorithm
    9|       | * The algorithm takes a string, and looks up the corresponding reversed letter
   10|       | * for each letter in the word and replaces it. Spaces are ignored and case is
   11|       | * preserved.
   12|       | *
   13|       | * @author [Focusucof](https://github.com/Focusucof)
   14|       | */
   15|       |#include <cassert>   /// for assert
   16|       |#include <iostream>  /// for IO operations
   17|       |#include <map>       /// for std::map
   18|       |#include <string>    /// for std::string
   19|       |
   20|       |/** \namespace ciphers
   21|       | * \brief Algorithms for encryption and decryption
   22|       | */
   23|       |namespace ciphers {
   24|       |/** \namespace atbash
   25|       | * \brief Functions for the [Atbash
   26|       | * Cipher](https://en.wikipedia.org/wiki/Atbash) implementation
   27|       | */
   28|       |namespace atbash {
   29|       |std::map<char, char> atbash_cipher_map = {
   30|       |    {'a', 'z'}, {'b', 'y'}, {'c', 'x'}, {'d', 'w'}, {'e', 'v'}, {'f', 'u'},
   31|       |    {'g', 't'}, {'h', 's'}, {'i', 'r'}, {'j', 'q'}, {'k', 'p'}, {'l', 'o'},
   32|       |    {'m', 'n'}, {'n', 'm'}, {'o', 'l'}, {'p', 'k'}, {'q', 'j'}, {'r', 'i'},
   33|       |    {'s', 'h'}, {'t', 'g'}, {'u', 'f'}, {'v', 'e'}, {'w', 'd'}, {'x', 'c'},
   34|       |    {'y', 'b'}, {'z', 'a'}, {'A', 'Z'}, {'B', 'Y'}, {'C', 'X'}, {'D', 'W'},
   35|       |    {'E', 'V'}, {'F', 'U'}, {'G', 'T'}, {'H', 'S'}, {'I', 'R'}, {'J', 'Q'},
   36|       |    {'K', 'P'}, {'L', 'O'}, {'M', 'N'}, {'N', 'M'}, {'O', 'L'}, {'P', 'K'},
   37|       |    {'Q', 'J'}, {'R', 'I'}, {'S', 'H'}, {'T', 'G'}, {'U', 'F'}, {'V', 'E'},
   38|       |    {'W', 'D'}, {'X', 'C'}, {'Y', 'B'}, {'Z', 'A'}, {' ', ' '}
   39|       |
   40|       |};
   41|       |
   42|       |/**
   43|       | * @brief atbash cipher encryption and decryption
   44|       | * @param text Plaintext to be encrypted
   45|       | * @returns encoded or decoded string
   46|       | */
   47|      2|std::string atbash_cipher(const std::string& text) {
   48|      2|    std::string result;
   49|     22|    for (char letter : text) {
   50|     22|        result += atbash_cipher_map[letter];
   51|     22|    }
   52|      2|    return result;
   53|      2|}
   54|       |
   55|       |}  // namespace atbash
   56|       |}  // namespace ciphers
   57|       |
   58|       |/**
   59|       | * @brief Self-test implementations
   60|       | * @returns void
   61|       | */
   62|      1|static void test() {
   63|       |    // 1st test
   64|      1|    std::string text = "Hello World";
   65|      1|    std::string expected = "Svool Dliow";
   66|      1|    std::string encrypted_text = ciphers::atbash::atbash_cipher(text);
   67|      1|    std::string decrypted_text = ciphers::atbash::atbash_cipher(encrypted_text);
   68|      1|    assert(expected == encrypted_text);
   69|      0|    assert(text == decrypted_text);
   70|      0|    std::cout << "Original text: " << text << std::endl;
   71|      1|    std::cout << ", Expected text: " << expected << std::endl;
   72|      1|    std::cout << ", Encrypted text: " << encrypted_text << std::endl;
   73|      1|    std::cout << ", Decrypted text: " << decrypted_text << std::endl;
   74|      1|    std::cout << "\nAll tests have successfully passed!\n";
   75|      1|}
   76|       |
   77|       |/**
   78|       | * @brief Main function
   79|       | * @returns 0 on exit
   80|       | */
   81|      1|int main() {
   82|      1|    test();  // run self-test implementations
   83|      1|    return 0;
   84|      1|}

