    1|       |/**
    2|       | * @file
    3|       | * @brief [Eight Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle)
    4|       | * puzzle, printing all solutions
    5|       | *
    6|       | * @author [Himani Negi](https://github.com/Himani2000)
    7|       | * @author [David Leal](https://github.com/Panquesito7)
    8|       | *
    9|       | */
   10|       |#include <array>     /// for std::array
   11|       |#include <iostream>  /// for IO operations
   12|       |
   13|       |/**
   14|       | * @namespace backtracking
   15|       | * @brief Backtracking algorithms
   16|       | */
   17|       |namespace backtracking {
   18|       |/**
   19|       | * @namespace n_queens_all_solutions
   20|       | * @brief Functions for the [Eight
   21|       | * Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle) puzzle with all
   22|       | * solutions.
   23|       | */
   24|       |namespace n_queens_all_solutions {
   25|       |/**
   26|       | * @brief Utility function to print matrix
   27|       | * @tparam n number of matrix size
   28|       | * @param board matrix where numbers are saved
   29|       | */
   30|       |template <size_t n>
   31|      2|void PrintSol(const std::array<std::array<int, n>, n>& board) {
   32|     10|    for (int i = 0; i < n; i++) {
   33|     40|        for (int j = 0; j < n; j++) {
   34|     32|            std::cout << board[i][j] << " ";
   35|     32|        }
   36|      8|        std::cout << std::endl;
   37|      8|    }
   38|      2|    std::cout << std::endl;
   39|      2|}
   40|       |
   41|       |/**
   42|       | * @brief Check if a queen can be placed on the matrix
   43|       | * @tparam n number of matrix size
   44|       | * @param board matrix where numbers are saved
   45|       | * @param row current index in rows
   46|       | * @param col current index in columns
   47|       | * @returns `true` if queen can be placed on matrix
   48|       | * @returns `false` if queen can't be placed on matrix
   49|       | */
   50|       |template <size_t n>
   51|       |bool CanIMove(const std::array<std::array<int, n>, n>& board, int row,
   52|     60|              int col) {
   53|       |    /// check in the row
   54|    126|    for (int i = 0; i < col; i++) {
   55|     94|        if (board[row][i] == 1) {
   56|     28|            return false;
   57|     28|        }
   58|     94|    }
   59|       |    /// check the first diagonal
   60|     83|    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
   61|     60|        if (board[i][j] == 1) {
   62|      9|            return false;
   63|      9|        }
   64|     60|    }
   65|       |    /// check the second diagonal
   66|     58|    for (int i = row, j = col; i <= n - 1 && j >= 0; i++, j--) {
   67|     42|        if (board[i][j] == 1) {
   68|      7|            return false;
   69|      7|        }
   70|     42|    }
   71|     16|    return true;
   72|     23|}
   73|       |
   74|       |/**
   75|       | * @brief Main function to solve the N Queens problem
   76|       | * @tparam n number of matrix size
   77|       | * @param board matrix where numbers are saved
   78|       | * @param col current index in columns
   79|       | */
   80|       |template <size_t n>
   81|     17|void NQueenSol(std::array<std::array<int, n>, n> board, int col) {
   82|     17|    if (col >= n) {
   83|      2|        PrintSol(board);
   84|      2|        return;
   85|      2|    }
   86|     75|    for (int i = 0; i < n; i++) {
   87|     60|        if (CanIMove(board, i, col)) {
   88|     16|            board[i][col] = 1;
   89|     16|            NQueenSol(board, col + 1);
   90|     16|            board[i][col] = 0;
   91|     16|        }
   92|     60|    }
   93|     15|}
   94|       |}  // namespace n_queens_all_solutions
   95|       |}  // namespace backtracking
   96|       |
   97|       |/**
   98|       | * @brief Main function
   99|       | * @returns 0 on exit
  100|       | */
  101|      1|int main() {
  102|      1|    const int n = 4;
  103|      1|    std::array<std::array<int, n>, n> board{0};
  104|       |
  105|      1|    backtracking::n_queens_all_solutions::NQueenSol(board, 0);
  106|      1|}

